[ { "title": null, "url": "/posts/2023-04-18-unable_resolve_host/", "categories": "", "tags": "", "date": "2023-04-28 07:15:34 +0000", "snippet": "错误信息：使用sudo的时候需要等待特别久sudo: unable to resolve host 172-16-200-220: Name or service not known原理：配置静态主机名后没有登记到hosts列表里，每次sudo都是一个提权的过程，穿透至root环境，会涉及到DNS解析主机名的过程，如果更换了静态主机名却没有记录下，DNS无法解析只能等待timeout时间然后...", "content": "错误信息：使用sudo的时候需要等待特别久sudo: unable to resolve host 172-16-200-220: Name or service not known原理：配置静态主机名后没有登记到hosts列表里，每次sudo都是一个提权的过程，穿透至root环境，会涉及到DNS解析主机名的过程，如果更换了静态主机名却没有记录下，DNS无法解析只能等待timeout时间然后才能提权至localhost的超级权限解决方法：将静态主机名加入hosts列表里sudo vim /etc/hosts# 将主机名加到127.0.0.1后面127.0.0.1\tlocalhost &lt;静态主机名&gt;" }, { "title": "linux用户管理", "url": "/posts/linux_user/", "categories": "linux使用", "tags": "configuration", "date": "2023-03-16 08:00:00 +0000", "snippet": "linux用户管理/etc/passwd文件用户名:密码位(x):UID(五位数起步):GID(一般与UID相同):注释:用户目录:shell位置(/bin/bash)bashrc配置文件损坏或丢失原版的bashrc配置文件位于/etc/skel/.bashrc恢复cp /etc/skel/.bashrc ~/source ~/.bashrc", "content": "linux用户管理/etc/passwd文件用户名:密码位(x):UID(五位数起步):GID(一般与UID相同):注释:用户目录:shell位置(/bin/bash)bashrc配置文件损坏或丢失原版的bashrc配置文件位于/etc/skel/.bashrc恢复cp /etc/skel/.bashrc ~/source ~/.bashrc" }, { "title": "帆软学习", "url": "/posts/zsh_theme/", "categories": "linux使用", "tags": "configuration", "date": "2023-03-16 08:00:00 +0000", "snippet": "好看的皮肤（没有git）mortalscumbag好看的皮肤（有git）cloudkolomuse *奇怪的jonathan", "content": "好看的皮肤（没有git）mortalscumbag好看的皮肤（有git）cloudkolomuse *奇怪的jonathan" }, { "title": "帆软学习", "url": "/posts/fine_report/", "categories": "fine-report", "tags": "fine report", "date": "2023-03-16 08:00:00 +0000", "snippet": "正常流程1、\t获取需求：主要细节的就是和谁提的 和谁一边改一边确认2、\t完成需求： 帆软bi中导航栏-文件-切换工作目录-远程服务器2 添加报表3、\t打开前台页面-左侧导航栏-管理系统 目录管理-找到对应的目录下添加模板在表中展示模板参数=$参数名准备数据左下角模板数据集中，+-数据库查询-写sql下方可以看到能获取到的字段名拖动即可展示在表格上数据...", "content": "正常流程1、\t获取需求：主要细节的就是和谁提的 和谁一边改一边确认2、\t完成需求： 帆软bi中导航栏-文件-切换工作目录-远程服务器2 添加报表3、\t打开前台页面-左侧导航栏-管理系统 目录管理-找到对应的目录下添加模板在表中展示模板参数=$参数名准备数据左下角模板数据集中，+-数据库查询-写sql下方可以看到能获取到的字段名拖动即可展示在表格上数据项过滤条件双击单元格-过滤可选列 操作符 P（模板参数） 选择一个模板参数过滤支持excel导入导航栏-模板-模板web属性-填报页面设置以下设置：为该模板单独设置√使用工具栏图表颜色双击图表-右侧控件-单元格元素-特效\t添加条件-配色-系列序号-等于-（1， +∞）选中栏目变黑了导航栏-模板-模板web属性-填报页面设置 以下设置：为该模板单独设置 √填报当前编辑行背景设置：选颜色图表切换给图表添加 JavaScript 类型的超级链接，调用图表接口FR.Chart.WebUtils.getChart(chartId).showIndexChart(index);" }, { "title": "数据结构（递归和分治）", "url": "/posts/data_structure-partition/", "categories": "C/C++", "tags": "data structure", "date": "2023-03-16 08:00:00 +0000", "snippet": "折半查找一个数组先切分一半，按照中位元素判定是前半区还是后半区将半区数组传入递归不断切分直至中位元素关键字即为查找的元素int BinSearch(RcdType rcd[], KeyType key, int low, int high) {\tint mid = (low + high) / 2; // 获得中位索引\tif (low &gt; high) return -1; // 传...", "content": "折半查找一个数组先切分一半，按照中位元素判定是前半区还是后半区将半区数组传入递归不断切分直至中位元素关键字即为查找的元素int BinSearch(RcdType rcd[], KeyType key, int low, int high) {\tint mid = (low + high) / 2; // 获得中位索引\tif (low &gt; high) return -1; // 传入错误\tif (rcd[mid].key == key)\t\treturn mid; // 查找到元素的情况\telse if (rcd[mid].key &gt; key)\t\treturn BinSearch(rcd, key, low, mid-1);\telse\t\treturn BinSearch(rcd, key, mid+1, high);}归并排序无序数组分割成若干个等长的有序数列，然后组合这些有序数列2-路归并void Merge(RcdType SR[], RcdType TR[], int i, int m, int n){\t// 两个有序区间SR[i, m]和SR[m+1, n],归并到TR[i, n]里去\tint k, j;\tfor (j=m+1, k=i; i&lt;=m &amp;&amp; j&lt;=n; ++k) {\t\tif (SR[i].key &lt;= SR[j].key) // 加上等于号就不会变不稳定\t\t\tTR[k] = SR[i++];\t\telse TR[k] = SR[j++]\t}\twhile (i&lt;=m) TR[k++] = SR[i++]; // [m+1, n]部分已归并完,还差m未归并\twhile (j&lt;=n) TR[k++] = SR[j++];}(需要实现两个数组的交替归并，指示数i为单数则R2向R1归并)递归调用2-路归并void MSort(RcdType R1[], RcdType R2[], int i, int s, int t) {\tint m;\tif(s=t) {\t\tif(1==i%2) R2[s]=R1[s];\t}\telse { // 平分区间后按照交替归并原则分开归并\t\tm = (s+t) / 2;\t\tMSort(R1, R2, i+1, s, m);\t\tMSort(R1, R2, i+1, m+1, t);\t\tif(i==i%2)\t\t\tMerge(R1, R2, s, m, t);\t\telse\t\t\tMerge(R2, R2, s, m, t);\t}}申请内存void MergeSort(RcdSqList &amp; L) {\tRcdType * R;\tR = (RcdType *) malloc ((L.length+1) * sizeof(RcdType));\tMSort(L.rcd, R, 0, 1, L.length);\tfree(R);}快速排序冒泡的改进选定一个目标，然后对比，将比目标小的值放目标左边，将比目标大的值放目标右边划分-快排划分算法把低位弄去指示位，找高位元素比中枢小的，放进低位（高位空），然后找低位元素比中枢大的，放进高位（低位空），然后再把指示位元素放回低位。int Partition(RcyType rcd[], int low, int high) {\trcd[0] = rcd[low];\twhile (low &lt; high) {\t\t// 找出比中枢大、小的各一个元素\t\twhile(low&lt;high &amp;&amp; rcd[high].key &gt;= rcd[0].key) --high;\t\trcd[low]=rcd[high];\t\twhile(low&lt;high &amp;&amp; rcd[low].key &lt;= rcd[0].key) ++low;\t\trcd[high]=rcd[low];\t}\trcd[low]=rcd[0];}递归调用划分算法void QSort(RcdType rcd[], int s, int t) {\tint pivotloc;\tif (s&lt;t) {\t\tpivotloc = Partition(rcd, s, t);\t\tQSort(rcd, s, pivotloc-1);\t\tQSort(rcd, pivotloc+1, t);\t}}void QuickSort(RcdSqList &amp;L) {\tQSort(L.rcd, 1, L.length);}" }, { "title": "数据结构（排序）", "url": "/posts/data_structure-sort/", "categories": "C/C++", "tags": "data structure", "date": "2023-03-14 08:00:00 +0000", "snippet": "排序的分类 内部排序 待排序列完全放在内存中进行排序 外部排序 对大文件的排序（内存和外部存储器的多次数据交换） 排序是否稳定 排序后，相同的元素在前面的是否一直在前面 前面的相同元素与后面的相同元素不交换，则是稳定的 内部排序内部排序分类 交换排序 选择排序 插入排序 归并排序 基数排序基本数据结构typedef i...", "content": "排序的分类 内部排序 待排序列完全放在内存中进行排序 外部排序 对大文件的排序（内存和外部存储器的多次数据交换） 排序是否稳定 排序后，相同的元素在前面的是否一直在前面 前面的相同元素与后面的相同元素不交换，则是稳定的 内部排序内部排序分类 交换排序 选择排序 插入排序 归并排序 基数排序基本数据结构typedef int KeyType; // 数据类型typedef struct { // 单体\tKeyType key;\t...} RecordType, RcdType;typedef struct { // 顺序表\tRcdType * rcd;\tint length;\tint size;} RcdSqList;交换排序 冒泡排序 快速排序 冒泡的改进选定一个目标，然后对比，将比目标小的值放目标左边，将比目标大的值放目标右边划分-快排划分算法把低位弄去指示位，找高位元素比中枢小的，放进低位（高位空），然后找低位元素比中枢大的，放进高位（低位空），然后再把指示位元素放回低位。int Partition(RcyType rcd[], int low, int high) {\trcd[0] = rcd[low];\twhile (low &lt; high) {\t\t// 找出比中枢大、小的各一个元素\t\twhile(low&lt;high &amp;&amp; rcd[high].key &gt;= rcd[0].key) --high;\t\trcd[low]=rcd[high];\t\twhile(low&lt;high &amp;&amp; rcd[low].key &lt;= rcd[0].key) ++low;\t\trcd[high]=rcd[low];\t}\trcd[low]=rcd[0];}递归调用划分算法void QSort(RcdType rcd[], int s, int t) {\tint pivotloc;\tif (s&lt;t) {\t\tpivotloc = Partition(rcd, s, t);\t\tQSort(rcd, s, pivotloc-1);\t\tQSort(rcd, pivotloc+1, t);\t}}void QuickSort(RcdSqList &amp;L) {\tQSort(L.rcd, 1, L.length);}选择排序简单选择排序堆排序插入排序 直接插入排序将无序区的第一个记录按关键字插入到有序区的合适位置（在循环查找插入位置时，顺便将元素后移）void InsertSort(RcdSqList &amp;L) {\tint i, j;\tfor(i=1; i &lt; L.length; i++)\t\tif (L.rcd[i+1].key &lt; L.rcd[i].key) {\t\t\tL.rcd[0] = L.rcd[i+1];\t\t\tj = i+1;\t\t\tdo {\t\t\t\tj--;L.rcd[j+1] = L.rcd[j]\t\t\t} while (L.rcd[0].key &lt; L.rcd[j-1].key)\t\t\tL.rcd[j] = L.rcd[0];\t\t}} 希尔排序void ShellInsert(RcdSqList &amp;L, int dk) {\tint i, j;\tfor (i = 1; i &lt;= L.length-dk; ++i)\t\tif(L.rcd[i+dk].key &lt; L.rcd[i].key) {\t\t\tL.rcd[0] = L.rcd[i+dk];\t\t\tj = i + dk;\t\t\tdo {j-= dk; L.rcd[j+dk] = L.rcd[j]} // 只移动一个\t\t\twhile (j-dk &gt; 0 &amp;&amp; L.rcd[0].key &lt; L.rcd[j-dk].key); L.rcd[j] = L.rcd[0];\t\t}}// d[]为增量序列, 有t个元素，即循环做t次，每次增量为d[k]的希尔排序void ShellSort(RcdSqList &amp; L, int d[], int t) {\tint k;\tfor (k=0; k&lt;t; ++k) ShellInsert(L, d[k])}归并排序无序数组分割成若干个等长的有序数列，然后组合这些有序数列2-路归并void Merge(RcdType SR[], RcdType TR[], int i, int m, int n){\t// 两个有序区间SR[i, m]和SR[m+1, n],归并到TR[i, n]里去\tint k, j;\tfor (j=m+1, k=i; i&lt;=m &amp;&amp; j&lt;=n; ++k) {\t\tif (SR[i].key &lt;= SR[j].key) // 加上等于号就不会变不稳定\t\t\tTR[k] = SR[i++];\t\telse TR[k] = SR[j++]\t}\twhile (i&lt;=m) TR[k++] = SR[i++]; // [m+1, n]部分已归并完,还差m未归并\twhile (j&lt;=n) TR[k++] = SR[j++];}(需要实现两个数组的交替归并，指示数i为单数则R2向R1归并)递归调用2-路归并void MSort(RcdType R1[], RcdType R2[], int i, int s, int t) {\tint m;\tif(s=t) {\t\tif(1==i%2) R2[s]=R1[s];\t}\telse { // 平分区间后按照交替归并原则分开归并\t\tm = (s+t) / 2;\t\tMSort(R1, R2, i+1, s, m);\t\tMSort(R1, R2, i+1, m+1, t);\t\tif(i==i%2)\t\t\tMerge(R1, R2, s, m, t);\t\telse\t\t\tMerge(R2, R2, s, m, t);\t}}申请内存void MergeSort(RcdSqList &amp; L) {\tRcdType * R;\tR = (RcdType *) malloc ((L.length+1) * sizeof(RcdType));\tMSort(L.rcd, R, 0, 1, L.length);\tfree(R);}基数排序 链式基数排序 计数基数排序 ​\t外循环：从低位到高位​\t内循环：​\tcount数组记录0-9数字出现的次数​\tpos数组安排各数字对应存放的内存位置（要预留足够所有数字存放的位​\t置），放入一个要+1​\t将数按照pos数组进行存放// 顺序表数据结构typedef struct {\tKeysType * keys;\t...} KeysRcdType; // 关键字字段typedef struct {\tKeysRcdType * rcd; // 关键字起始位置（哨兵）\tint length;\tint size;\tint digitNum;\tint radix;} KeysSqList; // 顺序表类型void RadixPass(KeysRcdType rcd[], KeysRcdType rcd1[], int n, int i, int count[], int pos[], int radix){\t}Status RadixSort(KeysSqList &amp; L) {\tKeysRcdType * rcd1\tint i = 0, j;\tint * count, * pos;\t// 申请内存空间\tcount = (int *) malloc (L.radix * sizeof (int));\tpos = (int *) malloc (L.radix * sizeof (int));\trcd1 = (KeysRcdType *) malloc ((L.length + 1) * sizeof (KeysRcdType));\t\t// 申请校验\tif (NULL==count || NULL==pos || NULL==rcd1) return OVERFLOW;\t\t// 开始基数排序\twhile(i&lt;L.digitNum){\t\tfor(j=0; j&lt;L.radix; ++j) count[j]=0;\t\tif(0==i%2)\t\t\tRadixPass\t}\tif(1 == L.digitNum%2)\t\tfor(j=1;j&lt;=L.length;++j) L.rcd[j] = rcd1[j];\tfree(count); free(pos); fress(rcd1);\treturn OK;}" }, { "title": "提取、整合、竞争：走向验证式阅读理解(VGaokao数据集)", "url": "/posts/VGaokao/", "categories": "VGaokao", "tags": "VGaokao", "date": "2023-03-07 08:00:00 +0000", "snippet": "原作信息：题目：Extract, Integrate, Compete: Towards Verification Style Reading Comprehension作者：Chen Zhang, Yuxuan Lai, Yansong Feng , Dongyan ZhaoWangxuan Institute of Computer Technology, Peking Universi...", "content": "原作信息：题目：Extract, Integrate, Compete: Towards Verification Style Reading Comprehension作者：Chen Zhang, Yuxuan Lai, Yansong Feng , Dongyan ZhaoWangxuan Institute of Computer Technology, Peking University, ChinaThe MOE Key Laboratory of Computational Linguistics, Peking University, China{zhangch, erutan, fengyansong, zhaody} @pku.edu.cn摘要​\t\t在文章中，作者从高考中收集了一个新的验证风格阅读理解数据集，命名为VGaokao。与现有的工作不同，VGaokao数据集最初是为母语使用者的评估而设计的，因此需要更高级的语言理解能力。​\t\t为了解决VGaokao中的挑战，我们提出了一种新的提取-集成-竞争方法（Extract-Integrate-Compete approach），该方法使用新的查询更新机制迭代地选择互补证据，并自适应地提取支持性证据，然后进行两两竞争以推送模型以学习相似文本片段之间的细微差异。​\t\t实验表明，作者的方法在VGaokao上使用检索到的补充证据，模型优于各种基线，同时具有效率和可解释性的优点。作者的数据集和代码已发布用于进一步研究。序言​\t\t阅读理解经常被用于各种标准化考试中，以评估一个人的语言理解能力，考生需要阅读一篇长文，回答一系列问题，或根据短文验证给定的陈述。例如，在中国高考的语文阅读测试中，大约一半的阅读理解题是验证型的。如表1（底部）所示，要求学生阅读一篇文章，然后从四个选项（A~D）中选择与文章最一致的最佳陈述，或者与文章最接近的陈述。​\t\t虽然NLP社区对问答式任务进行了深入研究（Rajpurkar et al., 2016; Lai et al., 2017; Yang et al., 2018; Sun et al., 2020），但验证式MRC任务实际上受到的关注要少得多。在这里，如高考考试大纲中（http://gaokao.neea.edu.cn/）所示，从长篇大论中收集多个证据，提取支持性证据，并通过捕捉相似文本之间的细微差异（即选择）做出相应决定的能力，是学习汉语的必备技能。这类问题实际上为自然语言理解研究提供了一个理想的试验台。​\t\t在本文中，作者提出了一个名为VGaokao的验证式阅读理解数据集，以突出上述语言理解挑战。VGaokao是根据历年高考语文真题构建的。图1显示了VGaokao中的一个示例，其中一个语句（4个选项之一）应该根据给定的段落进行验证。因此，我们需要从文章中提取两个证据句子，将它们组合在一起，以检查证据对陈述的支持程度，最后与其他选择进行比较以得出答案。​\t\t与C3（Sun et al., 2020）and RACE（Lai et al., 2017）等第二语言学习者测试构建的数据集相比，VGaokao由母语者标准化语言测试构建，涉及更多的语言理解挑战。例如，VGaokao涉及更多的词汇和更复杂的句子结构。此外，VGaokao中近一半的陈述需要多个证据来验证。与FEVER（Thorne et al., 2018）,等事实核查任务相比，VGaokao中的大多数陈述既不是绝对正确的，也不是绝对错误的，这需要模型仔细比较一个陈述与另一个陈述，以根据给定的段落选择最合适的答案。​\t\t为了解决VGaokao中的上述挑战，我们提出了一种新的提取-集成-竞争（Extract-Integrate-Compete）框架，其中设计了两种查询更新策略，硬遮罩和软遮罩（hard masking and soft masking），以迭代地提取给定语句的多个补充证据。图1显示了一个使用软遮罩来突出显示在当前迭代中尚未找到相应证据的令牌的示例。在证据提取之后，我们自适应地过滤不相关的证据句子，并动态地确定要集成的证据片段的数量。然后根据检索到的证据验证每个问题中的选项，并以成对的方式进行比较，以选择最合理的答案。​\t\t作者实证研究了他们的提取-集成-竞争方法在VGaokao上的性能。实验表明，在证据检索F1中，我们的方法优于具有段落分块和各种证据选择方法的端到端方法。证据选择中的性能增益可以进一步传播到最终的问题回答性能。​\t\t作者的贡献可以概括为：1）他们提出了一种新的验证式阅读理解数据集VGaokao，它嵌入了更高级的语言理解技能。2） 他们提出了一种新的Extract-Intege-Compete方法，通过新颖的查询更新机制从长文章中迭代选择补充证据。他们基于证据链损失的竞争组件可以推动模型捕捉不同选择之间的细粒度差异。3） 实验表明，他们的方法在VGaokao上的证据检索F1和QA准确性方面都优于各种基线，同时显示了效率和可解释性的优点。VGaokao：验证风格阅读理解数据集​\t标准化语言测试被认为是获取机器阅读理解数据集的试验台。虽然大多数现有的工作集中于类似SQuAD的QA数据集（Yang et al., 2018; Kwiatkowski et al., 2019）或完形填空式问题（Zhang et al., 2018; Zheng et al., 2019），但很少涉及对验证式问题的研究。" }, { "title": "redis-py连接redis", "url": "/posts/Redis-(redis-py)/", "categories": "NoSQL", "tags": "Redis", "date": "2023-02-22 08:00:00 +0000", "snippet": "下载pippip install redis -i https://pypi.tuna.tsinghua.edu.cn/simple some-package详细信息https://pypi.org/project/redis/创建链接连接对象import redisr = redis.Redis( host=&lt;host&gt;, port=6379, passwor...", "content": "下载pippip install redis -i https://pypi.tuna.tsinghua.edu.cn/simple some-package详细信息https://pypi.org/project/redis/创建链接连接对象import redisr = redis.Redis( host=&lt;host&gt;, port=6379, password=&lt;password&gt;, db=0 # 不能切换，需要重新创建连接池)创建连接池import redispool = redis.ConnectionPool( host=&lt;host&gt;, port=6379, password=&lt;password&gt;, db=0, # 不能切换，需要重新创建连接池 max_connections=20)创建连接r = redis.Redis(\tconnection_pool=pool\t)关闭连接（python垃圾回收时会自动归还连接）del r操作字符串增# 单个增try:\tr.set(&lt;key&gt;,&lt;value&gt;)except Exception as e:\tprint(e)finally:\tdel r# 批量增try:\tr.mset({&lt;key1&gt;: &lt;value1&gt;, &lt;key2&gt;: &lt;value2&gt;, ...})except Exception as e:\tprint(e)finally:\tdel r删try:\tr.delete(&lt;key1&gt;, &lt;key2&gt;, ...)except Exception as e:\tprint(e)finally:\tdel r查# 单个查 (由于需要decode，查不到值会报错)try:\tvalue = r.get(&lt;key&gt;).decode(\"utf-8\")except AttributeError as e:\tprint(\"Counld not found value from key {}!\".format(&lt;key&gt;))finally:\tdel r# 批量查 (由于需要decode，查不到值会报错)try:\tresult=r.mget(&lt;key1&gt;, &lt;key2&gt;, ...)\tfor one in result:\t\tres.append(one.decode(\"utf-8\"))except AttributeError as e:\tprint(\"Counld not found value from key {}!\".format(&lt;key&gt;))finally:\tdel r列表增try:\tr.rpush(&lt;key&gt;, &lt;value1&gt;, &lt;value2&gt;, ...)except Exception as e:\tprint(e)finally:\tdel r删try:\tr.lpop(&lt;key&gt;)except Exception as e:\tprint(e)finally:\tdel r查try:\tres = r.lrange(&lt;key&gt;, 0, -1)\tfor one in res:\t\tresult.append(one.decode(\"utf-8\"))except Exception as e:\tprint(e)finally:\tdel r集合增try:\tr.sadd(&lt;key&gt;, &lt;value1&gt;, &lt;value2&gt;, ...)except Exception as e:\tprint(e)finally:\tdel r删try:\tr.srem(&lt;key&gt;, &lt;value&gt;)except Exception as e:\tprint(e)finally:\tdel r查try:\tres = r.smembers(&lt;key&gt;)except Exception as e:\tprint(e)finally:\tdel r有序集合增# 增加元素try:\tr.zadd(&lt;key&gt;, {&lt;value1&gt;: &lt;score1&gt;, &lt;value2&gt;: &lt;score2&gt;, ...})except Exception as e:\tprint(e)finally:\tdel r\t# 元素分数递增try:\tr.zincrby(&lt;key&gt;, &lt;incr_score&gt;, &lt;value1&gt;)except Exception as e:\tprint(e)finally:\tdel r查# 降序排序try:\tres = r.zrevrange(&lt;key&gt;, 0, -1)\tfor one in res:\t\tresult.append(one.decode(\"utf-8\"))except Exception as e:\tprint(e)finally:\tdel r哈希表增try:\tr.hmset(&lt;key&gt;, {&lt;hashkey1&gt;: &lt;hashvalue1&gt;, &lt;hashkey2&gt;: &lt;hashvalue2&gt;, ...})except Exception as e:\tprint(e)finally:\tdel r删try:\tr.hdel(&lt;key&gt;, &lt;hashkey&gt;)except Exception as e:\tprint(e)finally:\tdel r改try:\tr.hset(&lt;key&gt;, &lt;hashkey&gt;, &lt;hashvalue&gt;)except Exception as e:\tprint(e)finally:\tdel r查# 全部元素try:\tres = r.hgetall(&lt;key&gt;) # 元组的集合\tfor one in res:\t\tresult.append(one.decode(\"utf-8\"), result[one].decode(\"utf-8\")) # 属性的值需要单独提取except Exception as e:\tprint(e)finally:\tdel r# 是否存在r.hexists(&lt;key&gt;, &lt;hashkey&gt;)事务redis-py通过pipeline方式向Redis服务器传递批处理命令和执行事务创建pipeline对象pipline = r.pipeline()监听pipline.watch(...)开启事务编辑pipline.multi()！！！所有的操作必须使用pipline对象的方法（不要继续使用 r.hmset之类的）提交pipline.execute()关闭pipeline（很重要，不关闭无法回收至连接池）pipline.reset()例import redispool = redis.ConnectionPool( host=&lt;host&gt;, port=6379, password=&lt;password&gt;, db=0, # 不能切换，需要重新创建连接池 max_connections=20)r = redis.Redis(\tconnection_pool=pool\t)try:\tpipline=r.pipeline()\tpipline.watch(...)\tpipline.multi()\t...\tpipline.execute()except Exception as e:\tprint(e)finally:\tif \"pipline\" in dir():\t\tpipline.reset()\tdel r" }, { "title": "Redis数据结构", "url": "/posts/Redis-(data-structure)/", "categories": "NoSQL", "tags": "Redis", "date": "2023-02-21 08:00:00 +0000", "snippet": "数据结构key类型字符串 删除 DEL key 查询 # key是否存在EXISTS key# value数据类型TYPE key 设置记录过期时间 # n秒后EXPIRE key n# 指定时间EXPIREAT key (UNIX时间戳) 移除过期时间 PERSIST key 修改 # 迁移记录到另一个逻辑库nMOVE key n...", "content": "数据结构key类型字符串 删除 DEL key 查询 # key是否存在EXISTS key# value数据类型TYPE key 设置记录过期时间 # n秒后EXPIRE key n# 指定时间EXPIREAT key (UNIX时间戳) 移除过期时间 PERSIST key 修改 # 迁移记录到另一个逻辑库nMOVE key n# 重命名RENAME key newKeyNamevalue类型字符串哈希列表集合字符串（string） 用途：保存文字、序列化的二进制数据 存储容量：最大512M# 存储SET key string# 获取GET key# 删除DEL key 字符串指令字符串切片（n：起始位置，m：偏移量）GETRANGE key n m字符串长度STRLEN key设置带有过期时间的key-value（time单位：秒）SETEX key time value# 单位为毫秒PSETEX key time value设置多个key-valueMSET key1 value1 key2 value2获得多个valueMGET key1 key2向字符串结尾追加内容APPEND key content 字符串数字操作自增1INCR key增加nINCRBY key n增加浮点数mINCRBYFLOAT key m自减1DECR key减nDECRBY key n哈希（HASH） 用途：保存复杂的结构化数据 存储# 设置哈希表单个属性HSET key structure # structure：key value 格式# 追加属性HSET key structure# 设置多个属性HMSET key structure1 structure2 ... 查询# 查询一个字段的值HGET key structurekey# 查询多个字段的值HMGET key structurekey1 structurekey2 ...# 获得所有的字段HGETALL key# 获得所有字段的名称HKEYS key# 获得字段的数量HLEN key# 判断是否存在某个字段HEXISTS key structurekey# 获得所有字段的值HVALS key 删除# 删除字段HDEL key structurekey1 structurekey2 ... 修改# 追加整数num值HINCRBY key structurekey num# 追加浮点数num值HINCRBYFLOAT key structurekey num列表（LIST） 用途：保存序列化数据 存储 # 向右侧添加元素RPUSH key value1 value2 ... # right push# 向左侧添加元素LPUSH key value1 value2 ... # left push# 向value前插入元素newValueLINSERT key BEFORE value newValue# 向value后插入元素newValueLINSERT key AFTER value newValue 修改# 将位于index的值修改为newValueLSET key index newValue # list set 查询# 切片，index1为开始序号，index2为结束序号LRANGE key index1 index2 # list range# 获得列表长度LLEN key # list length# 获得列表位于index的元素LINDEX key index 删除# 删除最左侧元素LPOP key# 删除最右侧元素RPOP key# 删除列表n个指定元素value，如果有m个，则删除m个里的前n个LREM key n value# 删除整个列表DEL key集合（SET） 用途：需要列表中的元素不重复的时候 存储# 添加单个值SADD key value# 批量添加SADD key value1 value2 ...# 如果添加重复的值，redis只会表示插入失败 查询# 直接返回集合里所有的值SMEMBERS key # 集合没有索引序号，最早插入的值不一定在开头# 获取集合长度SCARD key# 判断是否有某个元素SISMEMBER key value# 随机获取n个元素SRANDMEMBER key n 删除# 删除指定值SREM key value1 value2 ...# 删除集合里所有数据DEL key# 随即删除并返回某个元素SPOP key比较元素是否相同原理：不是通过一个个值比对，而是直接比对区间内的哈希值是否一致就行了（超快速），所以集合是按照哈希值排序的，早插入的值不一定就在前面有序集合 用途：集合元素除了元素值外，还需要有分数值，可以按照分数值大小对数据进行排序（热搜榜词条的排序，用户对其进行搜索即自动增加，不需程序维护），多用于持久化的多线程计数 增加 ZADD key score1 value1 score2 value2 ... 查询# 降序排列切片[n1, n2]的元素(全部为0 -1)ZREVRANGE key n1 n2# 升序排列切片[n1, n2]的元素(全部为0 -1)ZRANGE key n1 n2# 获取有序集合长度ZCARD key# 查询[n1, n2]分数值区间内的元素数量ZCOUNT key n1 n2# 查询value元素的分数值ZSCORE key value# 获得元素的升序排名(从0开始)ZRANK key value# 获得元素的降序排名(从0开始)ZREVRANK key value# 获取 [score1,score2] 分数值区间内的集合内容ZRANGEBYSCORE key score1 score2 # （升序）ZREVRANGEBYSCORE key score2 score1 # （降序）# 获取 [score1,score2) 分数值区间内的集合内容ZRANGEBYSCORE key score1 (score2 # （升序）ZREVRANGEBYSCORE key (score2 score1 # （降序）# 获取[score,+∞)分数值的集合内容ZRANGEBYSCORE key score +inf # （升序）ZREVRANGEBYSCORE key +inf score # （降序）# 获取(-∞,score]分数值的集合内容ZRANGEBYSCORE key -inf score # （升序）ZREVRANGEBYSCORE key score -inf # （降序） 修改# 某个值的分数增加nZINCRBY key n value 删除# 删除整个有序集合DEL key# 删除有序集合中的元素ZREM key value1 value2 ...# 删除排名n1~n2区间内的元素ZREMRANGEBYRANK key n1 n2# 删除分数值区间内的元素ZREMRANGEBYSCORE key -inf (score" }, { "title": "Redis事务", "url": "/posts/Redis-(transaction)/", "categories": "NoSQL", "tags": "Redis", "date": "2023-02-21 03:00:00 +0000", "snippet": "抛弃认知Redis事务机制不具备sql数据的undo、redo日志操作，不能保证事务的原子性A成功了，B执行时宕机，表现即为A成功，B失败Redis事务机制（批处理执行）为了避免命令被插队Redis是异步单线程执行，一个线程即对应所有的客户端，哪个客户端上传了命令，线程就会执行，所以不能保证一个客户端的多个命令，不会被其他客户端的命令插队。只能保证ACID属性里的一致性和隔离性一致性（保证命...", "content": "抛弃认知Redis事务机制不具备sql数据的undo、redo日志操作，不能保证事务的原子性A成功了，B执行时宕机，表现即为A成功，B失败Redis事务机制（批处理执行）为了避免命令被插队Redis是异步单线程执行，一个线程即对应所有的客户端，哪个客户端上传了命令，线程就会执行，所以不能保证一个客户端的多个命令，不会被其他客户端的命令插队。只能保证ACID属性里的一致性和隔离性一致性（保证命令串行执行）开启事务前要用WATCH命令监视要操作的记录WATCH key1 key2 ...开启事务MULTI...EXEC 开启事务后所有的操作都不会立即执行，只有等到EXEC命令的时候才会批处理执行 只有对应记录 watch后exec前 没有被修改过，才能执行成功 exec后没有提示则为失败取消事务MULTI...DISCARD 只是清空缓存内的批处理命令 事务没exec前可以撤销，exec后不可撤销" }, { "title": "Redis", "url": "/posts/Redis/", "categories": "NoSQL", "tags": "Redis", "date": "2023-02-20 03:00:00 +0000", "snippet": "缓存技术实现数据使用频率高的热数据更快访问——将热数据缓存至内存里缓存至内存的数据是从持久化数据写入的——解决断电即丢失的问题应用程序查询逻辑： 先到缓存层查找数据 如果找不到，再进入数据库查找数据 数据库的数据发生变化，需要及时更新至缓存 命令参考 Redis 命令参考 — Redis 命令参考 (redisfans.com) 下载win...", "content": "缓存技术实现数据使用频率高的热数据更快访问——将热数据缓存至内存里缓存至内存的数据是从持久化数据写入的——解决断电即丢失的问题应用程序查询逻辑： 先到缓存层查找数据 如果找不到，再进入数据库查找数据 数据库的数据发生变化，需要及时更新至缓存 命令参考 Redis 命令参考 — Redis 命令参考 (redisfans.com) 下载windwosredis-windows/downloads at master · ServiceStack/redis-windows (github.com)启动（默认端口6379）windows编写启动脚本（解压缩目录下start.bat）redis-server redis.windows.conf以管理员身份运行（cmd里）start.bat存储原理16个逻辑库（0~15）持久化方式断电前将内存中的数据保存到硬盘中（并不是每次变更都会同步，需要满足触发条件）RDB一分钟内数据写入超过10000次就会触发数据同步AOF日志记录数据写入（断电后重新执行日志即可恢复）redis-cli使用切换逻辑库select 0清空逻辑库（需要先选定要清空的逻辑库）flushdb清理所有数据flushall存入数据set &lt;key&gt; &lt;value&gt; # ok获取数据get &lt;key&gt; # \"&lt;value&gt;\"# 获取不到数据：（nil）删除数据del &lt;key&gt; # （integer） 1配置参数(配置后记得重启服务)单机redis（redis.windows.conf）redis配置port # 端口号，默认6379bind # 允许的ip，默认只允许本机(bind 0.0.0.0表示允许所有访问)timeout # client空闲多少秒后关机，默认0无限制loglevel # 日志级别, debug\\verbose\\notice\\warning， 默认为noticelogfile # 日志文件地址，需要关闭syslog-enabledsyslog-enabled # 把日志输出到控制台，默认yesdatabases # 逻辑库数量，默认16持久化存储配置RDB配置save n m # RDB文件同步的频率,在n秒内写入达m条数据即同步rdbcompression # 同步RDB文件的时候是否采用压缩，默认yesrdbchecksum # 同步时校验，默认yesdbfilename # 镜像文件名称，默认dump.rdbdir # rdb文件的目录，默认redis目录常用参数requirepass # 访问密码，默认无需密码maxclients # 最大连接数，默认无限制maxmemory # 占用内存大小，默认无限制AOF配置（开启AOF需要关闭RDB——把save参数注释掉）appendonly # 开启AOF备份appendfilename # AOF文件名appendfsync # AOF同步频率，分为no、everysec、always no：只把数据写入硬盘缓冲区，什么时候同步由操作系统决定（容易丢失） everysec：每秒把数据写入到硬盘（间隔为一秒，不只是写入缓冲区）（有可能丢失） always：每次写入都必须同步到硬盘（不会丢失数据）" }, { "title": "使用GridFS存储文件", "url": "/posts/MongoDB-GridFS/", "categories": "NoSQL", "tags": "MongoDB", "date": "2023-02-19 07:00:00 +0000", "snippet": "文件存储例子：商品图片、用户头像优点：读写速度快，文件存储引擎完善，适用于分布式环境，比普通sql数据库更适合存储文件GridFS存储引擎主要用于存储超16M（BSON文件限制）的文件，对大文件有着更好的性能。存储原理用两个集合来存储文件 database.chunks：存放文件 database.files：存储文件的元数据GridFS会把文件分割成若干chunks（256KB），然后...", "content": "文件存储例子：商品图片、用户头像优点：读写速度快，文件存储引擎完善，适用于分布式环境，比普通sql数据库更适合存储文件GridFS存储引擎主要用于存储超16M（BSON文件限制）的文件，对大文件有着更好的性能。存储原理用两个集合来存储文件 database.chunks：存放文件 database.files：存储文件的元数据GridFS会把文件分割成若干chunks（256KB），然后在files记录它们连接GridFSfrom gridfs import GridFSdb = client.&lt;database&gt; # 指定保存文件的逻辑库gfs = GridFS(db, collection=&lt;table&gt;) # 指定保存文件的集合存储文件put# 打开文件file = open(\"path\", \"rb\")args = {\"type\": &lt;filetype&gt;, \"keyword\": &lt;keyword&gt;}gfs.put(file, filename=&lt;filename&gt;, **args)file.close() 需要以二进制方式读取文件方可存入（rb） args为自己定义的描述信息（文件的元数据），例如文件类型、文件关键词等，以字典形式传入即可（方便日后通过描述信息提取该文件） filetype：文件类型 keyword：关键词查询文件find_one# 按照文件名查找file = gfs.find_one({\"filename\": &lt;filename&gt;})# 查看文件体积print(\"%dM\" % (math.ceil(file.length / 1024 / 1024)))findfiles = gfs.find(&lt;conditions&gt;})# 查看文件更新日期for one in files:\tuploadDate = one.uploadDate + datetime.timedelta(hours=8)\tuploadDate = uploadDate.strftime(\"%Y-%m-%d %H:%M:%S\")\tprint(one._id, one.filename, uploadDate) 查看文件体积import math# 将大小由b转msize = \"%dM\" % (math.ceil(file.length / 1024 / 1024))) 查看文件更新日期import datetime# UTC转换北京时间uploadDate = file.uploadDate + datetime.timedelta(hours=8)# 格式化打印uploadDate = uploadDate.strftime(\"%Y-%m-%d %H:%M:%S\")判断文件是否存在existsfrom bson.objectid import ObjectId# 判断单个文件gfs.exists(ObjectId(&lt;objectid&gt;)) # 必须封装成objectid才能查# 判断查询结果是否为空gfs.exists(**{key: value})读取文件get：只能通过主键查找文件document = gfs.get(ObjectId(&lt;objectid&gt;))file = open(&lt;filepath&gt;, \"wb\")file.write(document.read())file.close()删除文件delete：只能通过主键删除文件gfs.delete(ObjectId(&lt;objectid&gt;))" }, { "title": "使用pymongo进行交互", "url": "/posts/MongoDB-pymongo/", "categories": "NoSQL", "tags": "MongoDB", "date": "2023-02-19 02:00:00 +0000", "snippet": "安装拉包pip install pymongo==3.7.2API接口清单Tutorial — PyMongo 4.3.3 documentation使用创建连接（MongoClient）MongoClient是客户端代理对象，可用于执行增删改查、连接池from pymongo import MongoClientclient = MongoClient(host=&lt;host&gt;,...", "content": "安装拉包pip install pymongo==3.7.2API接口清单Tutorial — PyMongo 4.3.3 documentation使用创建连接（MongoClient）MongoClient是客户端代理对象，可用于执行增删改查、连接池from pymongo import MongoClientclient = MongoClient(host=&lt;host&gt;, port=&lt;port&gt;) # 创建链接client.admin.authenticate(&lt;user&gt;, &lt;password&gt;) # 验证用户 Error:’Collection’ object is not callable 是由于pymongo版本高于4.0引起的，解决办法： import pymongoclient = pymongo.MongoClient(\t\t\t\t\t\t\thost=&lt;host&gt;,\t\t\t\t\t\t\tport=27017,\t\t\t\t\t\t\tusername=&lt;user&gt;,\t\t\t\t\t\t\tpassword=&lt;password&gt;) 写入insert_oneclient.&lt;dbname&gt;.&lt;tablename&gt;.insert_one({&lt;key: value&gt;})insert_manyclient.&lt;dbname&gt;.&lt;tablename&gt;.insert_many([{&lt;key: value&gt;},{&lt;key: value&gt;}, ...])查询find_onecursor = client.&lt;dbname&gt;.&lt;tablename&gt;.find_one(&lt;conditions&gt;)# 获取查询结果print(cursor[\"_id\"], cursor[&lt;column&gt;], ...)findcursor = client.&lt;dbname&gt;.&lt;tablename&gt;.find(&lt;conditions&gt;)# 获取查询结果for one in cursor:\tprint(one[\"_id\"], one[&lt;column&gt;], ...)修改update_one# 修改元素client.&lt;dbname&gt;.&lt;tablename&gt;.update_one(&lt;conditions&gt;, {\"$set\": &lt;key: value&gt;})# 添加元素client.&lt;dbname&gt;.&lt;tablename&gt;.update_one(&lt;conditions&gt;, {\"$push\": &lt;key: value&gt;})update_many# 如果没有该元素就增加该元素，如果有该元素，则该元素elements+1client.&lt;dbname&gt;.&lt;tablename&gt;.update_many(&lt;conditions&gt;, {\"$set\": {\"key\": [\"value\"]}})删除delete_one# 如果有多条记录，只会删除第一条client.&lt;dbname&gt;.&lt;tablename&gt;.delete_one(&lt;conditions&gt;)delete_many# 删除符合条件的记录client.&lt;dbname&gt;.&lt;tablename&gt;.delete_many(&lt;conditions&gt;)# 清空表client.&lt;dbname&gt;.&lt;tablename&gt;.delete_many({})条件函数切片skip、limit：参数为数字# 只获取第n条开始到第m条结束的数据client.&lt;dbname&gt;.&lt;tablename&gt;.find({}).skip(n).limit(m)去重distinct：参数为字符串格式的字段名！！！# 以column字段为准进行去重client.&lt;dbname&gt;.&lt;tablename&gt;.distinct(&lt;column&gt;)排序sort：参数为列表，列表元素需要是元组类型！！！# 以column字段为准降序排序client.&lt;dbname&gt;.&lt;tablename&gt;.find().sort([(&lt;column&gt;, -1)])" }, { "title": "MongoDB备份恢复", "url": "/posts/MongoDB-recoverbackup/", "categories": "NoSQL", "tags": "MongoDB", "date": "2023-02-18 02:00:00 +0000", "snippet": "单表导出mongoexport --host=&lt;host&gt; --port=&lt;port&gt; -u &lt;user&gt; -p &lt;password&gt; --authenticationDatabase=&lt;database to which user belongs&gt; -d &lt;database&gt; -c &lt;table&gt; -f \"...", "content": "单表导出mongoexport --host=&lt;host&gt; --port=&lt;port&gt; -u &lt;user&gt; -p &lt;password&gt; --authenticationDatabase=&lt;database to which user belongs&gt; -d &lt;database&gt; -c &lt;table&gt; -f \"_id,&lt;column&gt;\" -o &lt;filepath&gt; 不指定-f 则备份内容为一条一条的记录 只能是csv或json的路径 导入mongoimport --host=&lt;host&gt; --port=&lt;port&gt; -u &lt;user&gt; -p &lt;password&gt; --authenticationDatabase=&lt;database to which user belongs&gt; -d &lt;database&gt; -c &lt;table&gt; -f \"_id,&lt;column&gt;\" --file &lt;filepath&gt; 不指定-f 则备份内容为一条一条的记录 只能是csv或json的路径 逻辑库导出mongodump --host=&lt;host&gt; --port=&lt;port&gt; -u &lt;user&gt; -p &lt;password&gt; --authenticationDatabase=&lt;database to which user belongs&gt; -d &lt;database&gt; -o &lt;folderpath&gt; 是存放文件的文件夹路径，会在指定文件夹路径下创建与导出逻辑库同名的文件夹 –dumpDbUsersAndRoles 备份隶属于逻辑库的用户 数据以bson格式保存（二进制，不可直接查看），索引会以json形式记录导入mongorestore --host=&lt;host&gt; --port=&lt;port&gt; -u &lt;user&gt; -p &lt;password&gt; --authenticationDatabase=&lt;database to which user belongs&gt; -d &lt;database&gt; &lt;databasepath&gt; –drop 把现有数据删除后再全量导入" }, { "title": "MongoDB修改操作", "url": "/posts/MongoDB-UD/", "categories": "NoSQL", "tags": "MongoDB", "date": "2023-02-15 02:00:00 +0000", "snippet": "修改记录update()：修改单条记录updateMany()：修改多条记录db.&lt;tablename&gt;.updateMany({condition}, {$set:{data}})规则condition可以为空，但必须要写成json格式例子# 将李强一个人的年龄设为26，班级号设为2-6db.student.update({name: \"李强\"}, {$set: {age: 2...", "content": "修改记录update()：修改单条记录updateMany()：修改多条记录db.&lt;tablename&gt;.updateMany({condition}, {$set:{data}})规则condition可以为空，但必须要写成json格式例子# 将李强一个人的年龄设为26，班级号设为2-6db.student.update({name: \"李强\"}, {$set: {age: 26, classno: \"2-6\"}})# 将大于25岁的男生们分入2-6班db.student.updateMany({sex: \"男\"， age: {$gte: 25}}, {$set: {classno: \"2-6\"}})加法运算$inc：对某个字段进行加法运算# 对每条记录的age字段的值+2（不存在该字段的记录就视为0+2）db.student.updateMany({}, {$inc: {age: 2}})添加元素$push： 向数组属性添加元素例子# 去除Jack老师的教务主任职务db.teacher.update({name: \"Jack\"}, {$push: {role: \"教务主任\"}})删除元素$pull：删除数组属性的元素例子# 任命Jack老师为副校长db.teacher.update({name: \"Jack\"}, {$pull: {role: \"副校长\"}})删除记录删除字段$unset例子# 删除所有记录中的city和tel字段db.student.updateMany({}, {$unset: {city: 1, tel: 1}})删除整条记录remove()例子无条件删除# 删除整个表内的数据db.student.remove({})有条件删除# 删除6-2班所有男生的数据db.student.remove({class: \"6-2\", sex: \"男\"})" }, { "title": "MongoDB查询操作", "url": "/posts/MongoDB-R/", "categories": "NoSQL", "tags": "MongoDB", "date": "2023-02-14 02:00:00 +0000", "snippet": "查询语法全量数据db.&lt;tablename&gt;.find({})数据量db.&lt;tablename&gt;.count()数据存储空间db.&lt;tablename&gt;.dataSize()有条件查询$lt：{} # 小于$gt：{} # 大于$lte：{} # 小于等于$gte：{} # 大于等于$in：{} # 包括$nin：{} # 不包括$ne：{} ...", "content": "查询语法全量数据db.&lt;tablename&gt;.find({})数据量db.&lt;tablename&gt;.count()数据存储空间db.&lt;tablename&gt;.dataSize()有条件查询$lt：{} # 小于$gt：{} # 大于$lte：{} # 小于等于$gte：{} # 大于等于$in：{} # 包括$nin：{} # 不包括$ne：{} # 不等于$all:[{...}, {...}, ...] # 全部,# db.student.find({name: {$all: [\"小红\", \"小黄\", \"小李\"]}})$not:{...} # 全不$or:[{...}] # 或,# db.student.find($or: [{age: {$lt: 30}, sex: \"男\"}, {age: {$lt: 25}, sex: \"女\"}])$exists:1 # 字段存在,# db.student.find({age: {$exists: 1}})正则表达式 ( JavaScript语法 )模糊查询db.&lt;表名&gt;.find({&lt;字段&gt;:&lt;正则表达式&gt;})规则 以 /^ 表示必须以指定字符串开头 以 $/ 表示必须以指定字符串结尾 规定内容[a-zA-Z] # 只能书写26个英文字母的大小写 规定数量{2,10} # 只能书写2-10个字符例子# 查询学生表里名字是2-10个英文字母组成的全部学生记录db.student.find({name: /^[a-zA-Z]{2, 10}$/})分页查询skip()：设置起始位置limit()：设置偏移量例子# 查询前十条记录db.student.find({}).limit(10);# 查询第20-30条记录（跳过前20条数据，获取后10条数据）db.student.find({}).skip(20).limit(10);数据排序sort()：1代表升序，-1代表降序规则sort必须写在find之后（紧贴！！）例子# 降序排序上一条的结果db.student.find({}).sort({name: -1}).skip(20).limit(10);去重distinct()规则 不能跟在find之后，而且取代find的位置 必须指定去重的字段（字符串）返回数组格式！！！例子# 查询每个学生的记录（不允许重复）db.student.distinct(\"name\")# 对上一条结果进行降序排序db.student.distinct(\"name\").sort(function(){return -1})# 数组格式不支持直接排序，此为JavaScript的排序函数，参数为表示排序规则的匿名函数# 对上上结果进行分页查询db.student.distinct(\"name\").slice(0, 5)# 数组格式不支持skip、limit，此为JavaScript的切片索引创建索引db.&lt;tablename&gt;.createIndex({&lt;keys&gt;: 1}, &lt;options&gt;) # 1代表升序，-1代表降序注意事项创建索引的过程需要阻塞MongoDB——会影响其他增删改查操作optionsbackground：在空闲的时候创建索引（最好带上！！！）db.&lt;tablename&gt;.createIndex({&lt;keys&gt;: 1}, {background: true}) # 在空闲的时候创建索引name：指定索引名字（不指定默认为keys_index，index为1，2。。。）db.&lt;tablename&gt;.createIndex({&lt;keys&gt;: 1}, {name: &lt;indexname&gt;}) # 在空闲的时候创建索引unique：唯一性索引db.&lt;tablename&gt;.createIndex({&lt;keys&gt;: 1}, {unique: true})# 唯一性索引只能创建在公共字段上（每条记录都必须有这个字段），否则报错E11000 duplicate key error collection删除索引删除所有索引db.&lt;tablename&gt;.dropIndexes()删除单个索引db.&lt;tablename&gt;.dropIndex(&lt;indexname&gt;)修改索引查询索引db.&lt;tablename&gt;.getIndexes()查询结果Key\t\t\t\t\t\t\tValue{1}\t\t\t\t\t\t\t[n elements] # 有多少条索引记录\t[0]\t\t\t\t\t\t{n fields} # 第几条索引记录\t\tv\t\t\t\t\t2\t\tkey\t\t\t\t\t{n fields}\t\t\t&lt;索引的字段名&gt;\t1.0\t\tname\t\t\t\t&lt;索引名字&gt;\t\tns\t\t\t\t\t&lt;索引所在的表名&gt;\t\t&lt;options&gt;\t[1]\t\t...\t..." }, { "title": "MongoDB", "url": "/posts/MongoDB/", "categories": "NoSQL", "tags": "MongoDB", "date": "2023-02-13 02:00:00 +0000", "snippet": "数据结构数据（文档）：BSON（二进制JSON文件）数据集（集合）：BSON集简介MongoDB介于关系型与非关系型数据库之间 没有采用关系模型 保留了逻辑库、数据表 数据表不支持表连接——一般不能拆分多表缺点 需要使用JavaScript语句操作数据库（可以使用数据库查看工具自动翻译） 默认不需要密码即可登录（需要进行用户管理）与Redis不同 存储位置：Redis：内存，Mo...", "content": "数据结构数据（文档）：BSON（二进制JSON文件）数据集（集合）：BSON集简介MongoDB介于关系型与非关系型数据库之间 没有采用关系模型 保留了逻辑库、数据表 数据表不支持表连接——一般不能拆分多表缺点 需要使用JavaScript语句操作数据库（可以使用数据库查看工具自动翻译） 默认不需要密码即可登录（需要进行用户管理）与Redis不同 存储位置：Redis：内存，MongoDB：硬盘 存取速度：Redis &gt; MongoDB 存储体量：MongoDB &gt; Redis 数据结构：Redis：key-value，MongoDB：数据表下载windows [Download MongoDB Community Server MongoDB](https://www.mongodb.com/try/download/community) bin目录不能改：（需要配置path）C:\\Program Files\\MongoDB\\Server\\4.0\\bin data、log目录可以改至机械硬盘D:\\MongoDB\\Server\\4.0\\dataD:\\MongoDB\\Server\\4.0\\log启动、关闭windows 图形界面：开启、禁用MongoDB Server服务计算机管理-服务-手动 命令行（管理员权限）net start \"mongodb server\"net stop \"mongodb server\"# 访问MongoDBmongo --host &lt;host&gt; --port &lt;port&gt;" }, { "title": "MongoDB角色管理", "url": "/posts/MongoDB-(role)/", "categories": "NoSQL", "tags": "MongoDB", "date": "2023-02-13 02:00:00 +0000", "snippet": "内置角色指定逻辑库（不是所有逻辑库都有权力）Read # 只读readWrite # 读写dbAdmin # 管理userAdmin # 对用户管理所有逻辑库（角色只能创建在admin逻辑库中）readAnyDatabase # 只读readWriteAnyDatabase # 读写dbAdminAnyDatabase # 管理userAdminAnyDatabase # 对...", "content": "内置角色指定逻辑库（不是所有逻辑库都有权力）Read # 只读readWrite # 读写dbAdmin # 管理userAdmin # 对用户管理所有逻辑库（角色只能创建在admin逻辑库中）readAnyDatabase # 只读readWriteAnyDatabase # 读写dbAdminAnyDatabase # 管理userAdminAnyDatabase # 对用户管理clusterAdmin # 管理mongo集群root # 最高权限设置登陆账户use admindb.createUser({\tuser: \"admin\", # 角色登录名（叫什么不影响）\tpwd: \"...\",\troles: [{role: \"root\", db: \"admin\"}] # 指定角色和角色所属的逻辑库})开启登陆验证 创建配置文件（C:\\Program Files\\MongoDB\\Server\\4.0\\bin\\mongo.cnf）dbpath=&lt;data path&gt;logpath=&lt;log path&gt; # mongod.log文件的绝对路径auth=True 重新安装MongoDB服务mongod --config \"C:\\Program Files\\MongoDB\\Server\\4.0\\bin\\mongo.cnf\" --reinstall登录验证 图形界面直接使用用户密码登录（之前没有使用用户密码的链接会失效） 命令行登陆验证设置在use database阶段use admindb.auth(&lt;user&gt;, &lt;password&gt;) # 返回1代表成功" }, { "title": "更改pip缓存位置", "url": "/posts/change_pip_cache_path/", "categories": "NoSQL", "tags": "MongoDB", "date": "2023-02-12 02:00:00 +0000", "snippet": "前言由于pip cache默认存储路径为c盘，一段时间使用后占用内存已达16G。如果更改存储位置至机械硬盘，C盘爆满的问题会得到有效缓解方法机械硬盘中创建缓存目录D:\\code\\pipcache配置新的pip cache路径pip config set global.cache-dir \"D:\\code\\pipcache\"删除C盘pip cache路径C:\\Users\\LEEsongHoU\\...", "content": "前言由于pip cache默认存储路径为c盘，一段时间使用后占用内存已达16G。如果更改存储位置至机械硬盘，C盘爆满的问题会得到有效缓解方法机械硬盘中创建缓存目录D:\\code\\pipcache配置新的pip cache路径pip config set global.cache-dir \"D:\\code\\pipcache\"删除C盘pip cache路径C:\\Users\\LEEsongHoU\\AppData\\Local\\pip" }, { "title": "搭建rtmp推流服务器", "url": "/posts/rtmp_server/", "categories": "linux", "tags": "fire-smoke-detect", "date": "2022-11-23 02:00:00 +0000", "snippet": "ubuntu：22.04下载依赖sudo apt-get install libssl-dev sudo apt-get install libpcre3 libpcre3-dev sudo apt-get install openssl libssl-dev sudo apt-get install zlib1g-dev sudo apt-get install git sudo a...", "content": "ubuntu：22.04下载依赖sudo apt-get install libssl-dev sudo apt-get install libpcre3 libpcre3-dev sudo apt-get install openssl libssl-dev sudo apt-get install zlib1g-dev sudo apt-get install git sudo apt-get install wgetsudo apt install build-essential下载编译包cd ~/rtmpwget https://nginx.org/download/nginx-1.22.1.tar.gzsudo tar -xvf nginx-1.22.1.tar.gzsudo mv nginx-1.22.1 nginxcd /usr/local/srcsudo git clone https://gitcode.net/mirrors/arut/nginx-rtmp-module.git编译cd ~/rtmp/nginxsudo ./configure --add-module=/usr/local/src/nginx-rtmp-modulemake install开启cd /usr/local/nginx/sbinsudo ./nginx检查开启ps -ef|grep nginx访问nginx服务器ifconfighttp://{server ip}/页面提示：Welcome to nginx!If you see this page, the nginx web server is successfully installed and working. Further configuration is required.For online documentation and support please refer to nginx.org.Commercial support is available at nginx.com.Thank you for using nginx.关闭pkill nginx" }, { "title": "1.134-sight/detail模块(景点详细信息接口开发)", "url": "/posts/sight-detail-django/", "categories": "Online_traveling", "tags": "django+vue", "date": "2022-09-19 10:00:00 +0000", "snippet": "后端sight模块接口实现设计接口返回标准定义接口返回结构{meta: 源数据objects: 数据列表（数组）}接口错误信息约定（RESTful）GET安全且幂等获取表示变更时获取表示（缓存）200（OK） - 表示已在响应中发出204（无内容） - 资源有空表示301（Moved Permanently） - 资源的URI已被更新303（See Other） - 其他（如，负载均衡）30...", "content": "后端sight模块接口实现设计接口返回标准定义接口返回结构{meta: 源数据objects: 数据列表（数组）}接口错误信息约定（RESTful）GET安全且幂等获取表示变更时获取表示（缓存）200（OK） - 表示已在响应中发出204（无内容） - 资源有空表示301（Moved Permanently） - 资源的URI已被更新303（See Other） - 其他（如，负载均衡）304（not modified）- 资源未更改（缓存）400 （bad request）- 指代坏请求（如，参数错误）404 （not found）- 资源不存在406 （not acceptable）- 服务端不支持所需表示500 （internal server error）- 通用错误响应503 （Service Unavailable）- 服务端当前无法处理请求POST不安全且不幂等使用服务端管理的（自动产生）的实例号创建资源创建子资源部分更新资源如果没有被修改，则不过更新资源（乐观锁）200（OK）- 如果现有资源已被更改201（created）- 如果新资源被创建202（accepted）- 已接受处理请求但尚未完成（异步处理）301（Moved Permanently）- 资源的URI被更新303（See Other）- 其他（如，负载均衡）400（bad request）- 指代坏请求404 （not found）- 资源不存在406 （not acceptable）- 服务端不支持所需表示409 （conflict）- 通用冲突412 （Precondition Failed）- 前置条件失败（如执行条件更新时的冲突）415 （unsupported media type）- 接受到的表示不受支持500 （internal server error）- 通用错误响应503 （Service Unavailable）- 服务当前无法处理请求4.2、编写接口代码分配url地址（sight/urls.py）from django.urls import pathfrom sight import viewsurlpatterns = [ ... # 景点详情接口 path('sight/detail/&lt;int:pk&gt;/', views.SightDetailView.as_view(), name='sight_detail'),]编写视图函数class SightDetailView(DetailView): \"\"\" 景点详细信息 \"\"\" def get_queryset(self): return Sight.objects.all() def render_to_response(self, context, **response_kwargs): page_obj = context['object'] if page_obj is not None: if page_obj.is_valid: return NotFoundJsonResponse() data = {} # TODO return http.JsonResponse(data) else: return NotFoundJsonResponse()重构响应对象class SightDetailSerializer(serializers.BaseSerializer): \"\"\" 景点详情的对象 \"\"\" def to_dict(self): obj = self.obj return { 'id': obj.id, 'name': obj.name, 'desc': obj.desc, 'img_img': obj.banner_img.url, 'content':obj.content, 'score': obj.score, 'province': obj.province, 'min_price': obj.min_price, 'city': obj.city, 'area': obj.area, 'town': obj.town, # TODO 'comment_count': 0 }改写视图函数class SightDetailView(DetailView): \"\"\" 景点详细信息 \"\"\" def get_queryset(self): return Sight.objects.all() def render_to_response(self, context, **response_kwargs): page_obj = context['object'] if page_obj is not None: if page_obj.is_valid: return NotFoundJsonResponse() data = serializers.SightDetailSerializer(page_obj).to_dict() return http.JsonResponse(data) else: return NotFoundJsonResponse()4.3、模拟HTTP请求，测试验证接口" }, { "title": "1.133-景点详情（重构响应对象）", "url": "/posts/ORM-django-(2)/", "categories": "Online_traveling", "tags": "django+vue", "date": "2022-09-13 04:00:00 +0000", "snippet": "基类设定响应列表对象的基类（utils/serializers.py）分页元数据class MetaSerializer(object): \"\"\" 分页元数据 \"\"\" def __init__(self, page, page_count, total_count, **kwargs): \"\"\" :param page: 当前第几页 :p...", "content": "基类设定响应列表对象的基类（utils/serializers.py）分页元数据class MetaSerializer(object): \"\"\" 分页元数据 \"\"\" def __init__(self, page, page_count, total_count, **kwargs): \"\"\" :param page: 当前第几页 :param page_count: 总页数 :param total_count: 总记录数 \"\"\" self.page = page self.page_count = page_count self.total_count = total_count def to_dict(self): return { 'total_count': self.total_count, 'page_count': self.page_count, 'current_page': self.page, }分页封装（使用时需要重写get_obj方法）class BaseListPageSerializer(object): \"\"\" 分页类封装\"\"\" def __init__(self, page_obj, paginator=None, object_list=[]): \"\"\" :param page_obj: 当前页的对象 :param paginator: 分页器的对象 :param object_list: 当前页的数据列表 \"\"\" self.page_obj = page_obj self.paginator = paginator if paginator else page_obj.paginator self.object_list = object_list if object_list else page_obj.object_list def get_obj(self, obj): # 钩子函数 \"\"\" 对象的内容，子类重写 \"\"\" return {} def to_dict(self): page = self.page_obj.number page_count = self.paginator.num_pages total_count = self.paginator.count meta = MetaSerializer(page=page, page_count=page_count, total_count=total_count).to_dict() objects = [] for obj in self.object_list: objects.append(self.get_obj(obj)) return { 'meta': meta, 'objects': objects, }响应错误的基类（utils/response.py）from django.http import JsonResponseclass NotFoundJsonResponse(JsonResponse): \"\"\" 400 对应Json响应\"\"\" status_code = 400 def __init__(self, *args, **kwargs): data = { \"error_code\": \"4040000\", \"error_msg\": \"您访问的内容不存在或已被删除\", } super().__init__(data, *args, **kwargs) 应用景点列表的对象（sight/serializers.py）from utils import serializersclass SightListSerializer(serializers.BaseListPageSerializer): \"\"\" 景点列表的对象 \"\"\" def get_obj(self, obj): # 重写以返回自定义的字段 return { 'id': obj.id, 'name': obj.name, 'main_img': obj.main_img.url, 'score': obj.score, 'province': obj.province, 'min_price': obj.min_price, 'city': obj.city, # TODO 'comment_count': 0 }修改返回方法（sight/views.py）from sight import serializersfrom utils.response import NotFoundJsonResponse def render_to_response(self, context, **response_kwargs): page_obj = context['page_obj'] # 打断点+调试模式可以知道这里面包含什么数据 if page_obj is not None: data = serializers.SightListSerializer(page_obj).to_dict() return http.JsonResponse(data) else: return NotFoundJsonResponse()" }, { "title": "1.133-景点详情（ORM模型开发）", "url": "/posts/ORM-django-1/", "categories": "Online_traveling", "tags": "django+vue", "date": "2022-09-12 02:00:00 +0000", "snippet": "后端account模块1、创建account模块python manage.py startapp account2、添加进INSTALL_APPS(traveling_django/settings.py)INSTALLED_APPS = [\t... # 账户模块 'account.apps.AccountConfig',]3、ORM模型ORM模型设计公共模型（utils/mo...", "content": "后端account模块1、创建account模块python manage.py startapp account2、添加进INSTALL_APPS(traveling_django/settings.py)INSTALLED_APPS = [\t... # 账户模块 'account.apps.AccountConfig',]3、ORM模型ORM模型设计公共模型（utils/models.py）from django.db import modelsclass CommonModel(models.Model): \"\"\" 模型公共类 \"\"\" is_valid = models.BooleanField('是否有效', default=True) created_at = models.DateTimeField('创建时间', auto_now_add=True) updated_at = models.DateTimeField('修改时间', auto_now=True) class Meta: abstract = True # 必须写，不然会生成数据库表用户账户模型（account/models.py）from django.db import modelsfrom utils.models import CommonModel# Create your models here.class User(CommonModel): \"\"\"用户模型\"\"\" username = models.CharField('用户名', max_length=32, unique=True) password = models.CharField('密码', max_length=256) avatar = models.ImageField('用户头像', upload_to='avatar/%Y%m', null=True, blank=True) nickname = models.CharField('昵称', max_length=32, unique=True) class Meta: db_table = 'account_user' 检查语法python manage.py check生成同步原语python manage.py makemigrations同步模型至数据库 python manage.py migrate图片关联模型（system/models.py）from account.models import Userfrom utils.models import CommonModelclass ImageRelated(CommonModel): \"\"\" 图片关联 \"\"\" img = models.ImageField('图片', max_length=256, upload_to='%Y%m/file/') summary = models.CharField('图片说明', max_length=32, null=True, blank=True) user = models.ForeignKey(User, related_name='upload_images', verbose_name='上传的用户', null=True, on_delete=models.SET(None)) content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE) object_id = models.IntegerField('关联的模型') content_object = GenericForeignKey('content_type', 'object_id') class Meta: db_table = 'system_image_related'轮播图模型修改（system/models.py）class Slider(CommonModel): name = models.CharField('名称', max_length=32) desc = models.CharField('描述', max_length=100, null=True, blank=True) types = models.SmallIntegerField('展现的位置', default=10) img = models.ImageField('图片地址', max_length=255, upload_to='%Y%m/slider') reorder = models.SmallIntegerField('排序字段', default=0, help_text='数字越大越靠前') start_time = models.DateTimeField('生效开始时间', null=True, blank=True) end_time = models.DateTimeField('生效开始时间', null=True, blank=True) target_url = models.CharField('跳转的地址', max_length=100, null=True, blank=True) class Meta: db_table = 'system_slider' ordering = ['-reorder']景点基础信息修改（sight/models.py）from system.models import ImageRelatedfrom utils.models import CommonModelclass Sight(CommonModel): \"\"\" 景点基础信息 \"\"\" name = models.CharField('名称', max_length=64) desc = models.CharField('描述', max_length=256) main_img = models.ImageField('主图', upload_to='%Y%m/sight/', max_length=256) banner_img = models.ImageField('详情主图', upload_to='%Y%m/sight/', max_length=256) content = models.TextField('详细') score = models.FloatField('评分', default=5) min_price = models.FloatField('最低价格', default=0) province = models.CharField('省份', max_length=32) city = models.CharField('市区', max_length=32) area = models.CharField('区/县', max_length=32, null=True) town = models.CharField('乡镇', max_length=32, null=True) is_top = models.BooleanField('是否为精选景点', default=False) is_hot = models.BooleanField('是否为热门景点', default=False) images = GenericRelation(ImageRelated, verbose_name='关联的图片', related_name='rel_sight_images') class Meta: db_table = 'sight' ordering = ['-updated_at']景点详情模型（sight/models.py）class Info(models.Model): \"\"\" 景点详情 \"\"\" sight = models.OneToOneField(Sight, on_delete=models.CASCADE) entry_explain = models.CharField('入园参考', max_length=1024, null=True, blank=True) play_way = models.TextField('特色玩法', null=True, blank=True) tips = models.TextField('温馨提示', null=True, blank=True) traffic = models.TextField('交通到达', null=True, blank=True) class Meta: db_table = 'sight_info'景点门票模型（sight/models.py）class Ticket(CommonModel): \"\"\" 门票 \"\"\" sight = models.ForeignKey(Sight, related_name='tickets', verbose_name='景点门票', on_delete=models.PROTECT) name = models.CharField('名称', max_length=128) desc = models.CharField('描述', max_length=64, null=True, blank=True) types = models.SmallIntegerField('类型', choices=TicketTypes.choices, default=TicketTypes.ADULT, help_text='默认为成人票') price = models.FloatField('价格（原价）') discount = models.FloatField('折扣', default=10) total_stock = models.PositiveIntegerField('总库存', default=0) remain_stock = models.PositiveIntegerField('剩余库存', default=0) expire_date = models.IntegerField('有效期', default=1) return_policy = models.CharField('退改政策', max_length=64, default='条件退') has_invoice = models.BooleanField('是否提供发票', default=True) entry_way = models.SmallIntegerField('入园方式', choices=EntryWay.choices, default=EntryWay.BY_TICKET,) tips = models.TextField('预定须知', null=True, blank=True) remark = models.TextField('其他说明', null=True, blank=True) status = models.SmallIntegerField('状态', choices=TicketStatus.choices, default=TicketStatus.OPEN,) class Meta: db_table = 'sight_ticket'评论及回复模型（sight/models.py）class Comment(CommonModel): \"\"\" 评论及回复 \"\"\" user = models.ForeignKey(User, verbose_name='评论人', related_name='comments', on_delete=models.CASCADE) sight = models.ForeignKey(Sight, verbose_name='景点', related_name='comments', on_delete=models.CASCADE) content = models.TextField('评论内容', blank=True, null=True) is_top = models.BooleanField('是否置顶', default=False) love_count = models.IntegerField('点赞次数', default=0) score = models.FloatField('评分', default=5) ip_address = models.CharField('IP地址', blank=True, null=True, max_length=64) is_public = models.SmallIntegerField('是否公开', default=1) reply = models.ForeignKey('self', blank=True, null=True, related_name='reply_comment', verbose_name='回复', on_delete=models.CASCADE) images = GenericRelation(ImageRelated, verbose_name='关联的图片', related_query_name='rel_comment_images') class Meta: db_table = 'sight_comment' ordering = ['-love_count', '-created_at']检查语法python manage.py check生成同步原语python manage.py makemigrations同步模型至数据库 python manage.py migrate#####" }, { "title": "1.132-景点详情（评论列表部分）", "url": "/posts/Sight-detail(3)/", "categories": "Online_traveling", "tags": "django+vue", "date": "2022-09-11 10:00:00 +0000", "snippet": "前端精选景点组件(@/views/sight/SightDetail)1、VantUI中找组件顶部导航栏&lt;van-cell title=\"单元格\" icon=\"location-o\" /&gt;导航栏图标&lt;van-icon name=\"comment-o\" /&gt;2、模板 &lt;!-- 用户评价 --&gt; &lt;div class=\"sight-comme...", "content": "前端精选景点组件(@/views/sight/SightDetail)1、VantUI中找组件顶部导航栏&lt;van-cell title=\"单元格\" icon=\"location-o\" /&gt;导航栏图标&lt;van-icon name=\"comment-o\" /&gt;2、模板 &lt;!-- 用户评价 --&gt; &lt;div class=\"sight-comment\"&gt; ... &lt;/div&gt; &lt;!-- // 用户评价 --&gt;顶部导航栏 &lt;van-cell title=\"热门评论\" icon=\"comment-o\" title-style=\"text-align:left\" /&gt;评论列表单独写成一个组件（@/component/sight/CommentItem）查看更多 &lt;router-link :to=\"{name:'SightComment', params: {id}}\"&gt; 查看更多 &lt;/router-link&gt;编写获取id的方法&lt;script&gt;export default { data () { return{ id: '' } }, created () { this.id = this.$route.params.id }}&lt;/script&gt;3、样式评论列表（跟上面间隔一个空槽、背景颜色改为白色） // 评论列表 .sight-comment { margin-top: 10px; background-color: #fff; }查看更多（将行列元素转换为块级元素） // 查看更多 .link-more { display: block; // 将行列元素转换为块级元素 color: #666; padding: 10px; }" }, { "title": "1.132-景点详情（评论列表项组件）", "url": "/posts/CommentItem/", "categories": "Online_traveling", "tags": "django+vue", "date": "2022-09-11 08:00:00 +0000", "snippet": "前端评论列表项组件(@/component/sight/CommentItem)1、VantUI中找组件评分&lt;van-rate v-model=\"value\" allow-half void-icon=\"star\" void-color=\"#eee\" /&gt;export default { data() { return { value: 2.5, }; ...", "content": "前端评论列表项组件(@/component/sight/CommentItem)1、VantUI中找组件评分&lt;van-rate v-model=\"value\" allow-half void-icon=\"star\" void-color=\"#eee\" /&gt;export default { data() { return { value: 2.5, }; },};图片&lt;van-image width=\"100\" height=\"100\" src=\"https://img01.yzcdn.cn/vant/cat.jpeg\"/&gt;图片预览&lt;van-image-preview v-model=\"show\" :images=\"images\" @change=\"onChange\"&gt; &lt;template v-slot:index&gt;第页&lt;/template&gt;&lt;/van-image-preview&gt;export default { data() { return { show: false, index: 0, images: [ 'https://img01.yzcdn.cn/vant/apple-1.jpg', 'https://img01.yzcdn.cn/vant/apple-2.jpg', ], }; }, methods: { onChange(index) { this.index = index; }, },};2、模板&lt;template&gt; &lt;!-- 评论列表每一项 --&gt; &lt;div class=\"comment-item-box\"&gt; ... &lt;/div&gt;&lt;/template&gt;顶部评分和用户名 &lt;div class=\"cmt-header\"&gt; &lt;div class=\"rate\"&gt; &lt;van-rate v-model=\"value\" allow-half void-icon=\"star\" void-color=\"#eee\" readonly /&gt; &lt;/div&gt; &lt;div class=\"user\"&gt;张三*** 2020-1-1&lt;/div&gt; &lt;/div&gt;编写双向绑定的数据&lt;script&gt;export default { data() { return { value: 4.5, } }}&lt;/script&gt;评论内容 &lt;div class=\"cmt-content\"&gt; &lt;p&gt;评论内容评论内容评论内容评论内容评论内容评论内容评论内容评论内容&lt;/p&gt; &lt;/div&gt;图片列表 &lt;!-- 图片列表 --&gt; &lt;div class=\"cmt-imgs\"&gt; &lt;van-image width=\"100\" height=\"100\" src=\"https://img01.yzcdn.cn/vant/cat.jpeg\" /&gt; &lt;van-image width=\"100\" height=\"100\" src=\"https://img01.yzcdn.cn/vant/cat.jpeg\" /&gt; &lt;van-image width=\"100\" height=\"100\" src=\"https://img01.yzcdn.cn/vant/cat.jpeg\" /&gt; &lt;/div&gt; &lt;!-- // 图片列表 --&gt;图片预览 &lt;!-- 图片预览 --&gt; &lt;van-image-preview v-model=\"show\" :images=\"images\" @change=\"onChange\"&gt; &lt;template v-slot:index&gt;第页&lt;/template&gt; &lt;/van-image-preview&gt;3、样式4、Home页面中引用轮播图组件(@/views/HomeView)引入组件&lt;script&gt;...// 评论项组件import CommentItem from '@/components/sight/CommentItem'export default { components: { CommentItem },&lt;/script&gt;展示 &lt;!-- 用户评价 --&gt; &lt;div class=\"sight-comment\"&gt;\t ... &lt;comment-item/&gt; ... &lt;/div&gt; &lt;!-- // 用户评价 --&gt;5、填充数据&lt;script&gt;export default { data () { return { value: 4.5, show: false, index: 0, images: [ 'https://img01.yzcdn.cn/vant/apple-1.jpg', 'https://img01.yzcdn.cn/vant/apple-2.jpg' ] } }, methods: { onChange (index) { this.index = index } }}&lt;/script&gt;6、优化样式" }, { "title": "1.132-景点详情（门票列表部分）", "url": "/posts/Sight-detail(2)/", "categories": "Online_traveling", "tags": "django+vue", "date": "2022-09-11 06:00:00 +0000", "snippet": "前端精选景点组件(@/views/sight/SightDetail)1、VantUI中找组件顶部导航栏&lt;van-cell title=\"单元格\" icon=\"location-o\" /&gt;导航栏图标&lt;van-icon name=\"bookmark-o\" /&gt;门票列表闹钟图标&lt;van-icon name=\"clock-o\" /&gt;门票列表标签&lt;van-t...", "content": "前端精选景点组件(@/views/sight/SightDetail)1、VantUI中找组件顶部导航栏&lt;van-cell title=\"单元格\" icon=\"location-o\" /&gt;导航栏图标&lt;van-icon name=\"bookmark-o\" /&gt;门票列表闹钟图标&lt;van-icon name=\"clock-o\" /&gt;门票列表标签&lt;van-tag mark type=\"primary\"&gt;标签&lt;/van-tag&gt;预订按钮&lt;van-button type=\"warning\"&gt;警告按钮&lt;/van-button&gt;2、模板 &lt;!-- 门票列表 --&gt; &lt;div class=\"sight-ticket\"&gt;\t ... &lt;/div&gt; &lt;!-- // 门票列表 --&gt;上方的导航栏 &lt;van-cell title=\"门票\" icon=\"bookmark-o\" title-style=\"text-align:left\" /&gt;下方的门票列表 &lt;div class=\"ticket-item\" v-for=\"i in 5\" :key=\"i\"&gt; ... &lt;/div&gt;左半部分 &lt;div class=\"left\"&gt; &lt;div class=\"title\"&gt;成人票&lt;/div&gt; &lt;div class=\"tips\"&gt; &lt;van-icon name=\"clock-o\" /&gt; &lt;span&gt;7点之前可以预定&lt;/span&gt; &lt;/div&gt; &lt;div class=\"tags\"&gt; &lt;van-tag mark type=\"primary\"&gt;标签1&lt;/van-tag&gt; &lt;/div&gt; &lt;/div&gt;右半部分 &lt;div class=\"right\"&gt; &lt;div class=\"price\"&gt; &lt;span&gt;￥&lt;/span&gt; &lt;strong&gt;65&lt;/strong&gt; &lt;/div&gt; &lt;router-link to=\"#\"&gt; &lt;van-button type=\"warning\" size=\"small\"&gt;预订&lt;/van-button&gt; &lt;/router-link&gt; &lt;/div&gt;3、样式 // 门票列表 .sight-ticket { margin-top: 10px; // 空槽 background-color: #fff; ... }门票（盒模型布局、背景色白色、与下方有空槽） .ticket-item { display: flex; border-bottom: 1px solid #f6f6f6; padding-bottom: 10px; // 空槽 .... }左半部分（左对齐、上下5像素， 左右10像素） .left { flex: 1; text-align: left; padding: 5px 10px; .title { padding: 5px 0; } .tips { font-size: 12px; } }右半部分 .right { width: 100px; .price { color: #ff9800; strong { font-size: 20px; } } }" }, { "title": "1.132-景点详情(景点大图部分)", "url": "/posts/Sight-detail(1)/", "categories": "Online_traveling", "tags": "django+vue", "date": "2022-09-10 10:00:00 +0000", "snippet": "前端精选景点组件(@/views/sight/SightDetail)1、VantUI中找组件顶部导航栏&lt;van-nav-bar title=\"标题\" left-text=\"返回\" right-text=\"按钮\" left-arrow @click-left=\"onClickLeft\" @click-right=\"onClickRight\"/&gt;景点图片&lt;van-...", "content": "前端精选景点组件(@/views/sight/SightDetail)1、VantUI中找组件顶部导航栏&lt;van-nav-bar title=\"标题\" left-text=\"返回\" right-text=\"按钮\" left-arrow @click-left=\"onClickLeft\" @click-right=\"onClickRight\"/&gt;景点图片&lt;van-image width=\"10rem\" height=\"10rem\" fit=\"contain\" src=\"https://img01.yzcdn.cn/vant/cat.jpeg\"/&gt;景点图片的小图标&lt;van-icon name=\"video-o\" /&gt;地址栏&lt;van-cell title=\"单元格\" icon=\"shop-o\"&gt; &lt;!-- 使用 right-icon 插槽来自定义右侧图标 --&gt; &lt;template #right-icon&gt; &lt;van-icon name=\"search\" class=\"search-icon\" /&gt; &lt;/template&gt;&lt;/van-cell&gt;地址栏左侧小图标&lt;van-icon name=\"location-o\" /&gt;地址栏右侧小图标&lt;van-icon name=\"arrow\" /&gt;2、模板头部导航栏&lt;template&gt; &lt;!-- 景点详情 --&gt; &lt;div class=\"page-sight-detail\"&gt; &lt;!-- 页面头部 --&gt; &lt;van-nav-bar left-text=\"返回\" left-arrow @click-left=\"onClickLeft\" fixed /&gt;&lt;/div&gt;&lt;/template&gt;返回事件&lt;script&gt;export default { methods: { goBack () { this.$router.go(-1) } }}&lt;/script&gt;景点大图 &lt;!-- 大图 --&gt; &lt;div class=\"sight-banner\"&gt;\t\t... &lt;/div&gt; &lt;!-- // 大图 --&gt;图片 &lt;van-image src=\"/stati/home/hot/h1_max.jpg\" width=\"100%\" height=\"100%\"/&gt;提示 &lt;div class=\"tips\"&gt; &lt;router-link class=\"pic-sts\" to=\"{name: 'SightImgae' params: {id:'123'}}\"&gt; &lt;van-icon name=\"video-o\" /&gt; &lt;span&gt;10 图片&lt;/span&gt; &lt;/router-link&gt; &lt;div class=\"title\"&gt;景点标题&lt;/div&gt; &lt;/div&gt;评分、景点介绍 &lt;!-- 评分、景点介绍 --&gt; &lt;div class=\"sight-info\"&gt; ... &lt;/div&gt; &lt;!-- // 评分、景点介绍 --&gt;左半部分 &lt;div class=\"left\"&gt; \t... &lt;/div&gt;评分 &lt;div class=\"info-title\"&gt; &lt;strong&gt;5分&lt;/strong&gt; &lt;small&gt;很棒&lt;/small&gt; &lt;/div&gt;评论 &lt;div class=\"info-tips\"&gt;50 评论&lt;/div&gt;跳转箭头 &lt;van-icon name=\"arrow\" /&gt;右半部分 &lt;div class=\"right\"&gt; \t... &lt;/div&gt;景点介绍 &lt;div class=\"info-title\"&gt; &lt;span&gt;景点介绍&lt;/span&gt; &lt;/div&gt;开放时间 &lt;div class=\"info-tips\"&gt;开放时间、贴士&lt;/div&gt;跳转箭头 &lt;van-icon name=\"arrow\" /&gt;地址栏 &lt;!-- 地址信息 --&gt; &lt;van-cell title=\"广东省广州市番禺区番禺大道\" icon=\"location-o\" :title-style=\"{'text-align': 'left'}\" // 左对齐 is-link // 使用vue-router &gt; &lt;!-- 使用 right-icon 插槽来自定义右侧图标 --&gt; &lt;template #right-icon&gt; &lt;van-icon name=\"arrow\" /&gt; &lt;/template&gt; &lt;/van-cell&gt;3、样式&lt;style lang=\"less\"&gt;.page-sight-detail { ...}&lt;/style&gt;景点大图 // 景点大图 .sight-banner { position: relative; }大图下面的图片数量提示和景点标题（绝对定位） .tips { position: absolute; left: 10px; bottom: 10px; font-size: 16px; color: #fff; .pic-sts { color: #fff; border-radius: 30px; font-size: 14px; background-color: rgba(0,0,0,0.4); } }顶部导航栏（透明） .van-nav-bar { background-color: transparent; }评分和景点介绍（有底部线框、盒状模型的左右结构） // 评分、景点介绍 .sight-info { display: flex; background-color: #fff; border-bottom: 1px solid #f6f6f6; \t... }右边框会有最左线框分割左右两个盒子 &amp; &gt; div { flex: 1; position: relative; } .right { border-left: 1px solid #f6f6f6; }主要文字（左对齐、评分里分数要更改颜色） .info-title { text-align: left; padding: 5px 10px; strong { color: #ff8300; } }主要文字下方的小提示（左对齐、浅灰色，缩小字体） .info-tips { color: #999; font-size: 12px; // 字体大小 text-align: left; padding: 5px 10px; }最右侧的跳转图标（重写、使用绝对定位放在最右侧上方） .van-icon { position: absolute; right: 5px; top: 5px; }" }, { "title": "1.132-景点详情", "url": "/posts/Sight-detail/", "categories": "Online_traveling", "tags": "django+vue", "date": "2022-09-07 10:00:00 +0000", "snippet": "前端新建景点详情各视图的文件夹（@/views/sight）记录url（@/router/index.js）引入视图import SightList from '../views/sight/SightList.vue'import SightDetail from '../views/sight/SightDetail.vue'import SightInfo from '../views...", "content": "前端新建景点详情各视图的文件夹（@/views/sight）记录url（@/router/index.js）引入视图import SightList from '../views/sight/SightList.vue'import SightDetail from '../views/sight/SightDetail.vue'import SightInfo from '../views/sight/SightInfo.vue'import SightComment from '../views/sight/SightComment.vue'import SightImage from '../views/sight/SightImage.vue'记录urlconst routes = [ ... // 景点列表 { path: '/sight/list', name: 'SightList', component: SightList }, // 景点详情 { path: '/sight/detail/:id', name: 'SightDetail', component: SightDetail }, // 景点介绍 { path: '/sight/info/:id', name: 'SightInfo', component: SightInfo }, // 评论列表 { path: '/sight/comment/:id', name: 'SightComment', component: SightComment }, // 景点图片 { path: '/sight/image/:id', name: 'SightImage', component: SightImage }]实现跳转景点列表@/components/common/ListSight.vue&lt;template&gt; &lt;router-link class=\"sight-item\" :to=\"{name: 'SightDetail', params: {id: item.id}}\"&gt; ... &lt;/router-link&gt;&lt;/template&gt;@/components/home/HotBox.vue&lt;template&gt; &lt;!-- 热门景点 --&gt; &lt;div class=\"home-hot-box\"&gt; &lt;!-- 顶上导航 --&gt; &lt;van-cell title=\"热门推荐\" icon=\"/static/home/hot/fire.png\" value=\"全部榜单\" title-style=\"text-align:left\" is-link :to=\"{name: 'SightList', query: {name: '热门景点'}}\"/&gt; &lt;!-- // 顶上导航 --&gt; ... &lt;!-- 景点列表 --&gt; &lt;div class=\"box-main\"&gt; &lt;router-link class=\"hot-item\" v-for=\"item in dataList\" :key=\"item.id\" :to=\"{name: 'SightDetail', params: {id: item.id}}\"&gt; ... &lt;/router-link&gt; &lt;/div&gt; &lt;!-- // 景点列表 --&gt; &lt;/div&gt;&lt;/template&gt;@/components/home/FineBox.vue&lt;template&gt; &lt;!-- 精选景点 --&gt; &lt;div class=\"home-fine-box\"&gt; &lt;!-- 顶上导航 --&gt; &lt;van-cell title=\"精选景点\" icon=\"location-o\" value=\"更多\" title-style=\"text-align:left\" is-link :to=\"{name: 'SightList', query: {name: '精选景点'}}\"/&gt; &lt;!-- // 顶上导航 --&gt; ... &lt;/div&gt;&lt;/template&gt;" }, { "title": "1.131-搜索功能", "url": "/posts/Search/", "categories": "Online_traveling", "tags": "django+vue", "date": "2022-09-05 10:00:00 +0000", "snippet": "前端搜索页面(@/views/SeachView)1、VantUI中找组件顶上标题&lt;van-nav-bar title=\"标题\" left-text=\"返回\" right-text=\"按钮\" left-arrow @click-left=\"onClickLeft\" @click-right=\"onClickRight\"/&gt;import { Toast } from '...", "content": "前端搜索页面(@/views/SeachView)1、VantUI中找组件顶上标题&lt;van-nav-bar title=\"标题\" left-text=\"返回\" right-text=\"按钮\" left-arrow @click-left=\"onClickLeft\" @click-right=\"onClickRight\"/&gt;import { Toast } from 'vant';export default { methods: { onClickLeft() { Toast('返回'); }, onClickRight() { Toast('按钮'); }, },};搜索框（需要实现双向绑定）&lt;van-search v-model=\"value\" show-action label=\"地址\" placeholder=\"请输入搜索关键词\" @search=\"onSearch\"&gt; &lt;template #action&gt; &lt;div @click=\"onSearch\"&gt;搜索&lt;/div&gt; &lt;/template&gt;&lt;/van-search&gt;分页&lt;van-pagination v-model=\"currentPage\" :page-count=\"12\" mode=\"simple\" /&gt;2、模板&lt;template&gt; &lt;!-- 搜索页面 --&gt; &lt;div calss=\"page-search\"&gt; ... &lt;/div&gt;&lt;/template&gt;标题\t&lt;!-- 标题 --&gt; &lt;van-nav-bar title=\"搜索景点\" /&gt;搜索框\t&lt;!-- 搜索框 --&gt; &lt;van-search v-model=\"sightName\" show-action label=\"景点\" placeholder=\"请输入搜索关键词\" @search=\"onSearch\" &gt; &lt;template #action&gt; &lt;div @click=\"onSearch\"&gt;搜索&lt;/div&gt; &lt;/template&gt; &lt;/van-search&gt;数据双向绑定和事件&lt;script&gt;export default { data () { return { sightName: '' } }, methods: { onSearch () { console.log('onSearch') } }}&lt;/script&gt;景点列表（复用） &lt;!-- 景点列表 --&gt; &lt;div class=\"sight-list\"&gt; &lt;sight-item v-for=\"item in dataList\" :key=\"item.id\" :item=\"item\"/&gt; &lt;/div&gt;引入组件&lt;script&gt;// 景点列表的每一项import SightItem from '@/components/common/ListSight'export default { data () { return { // 景点名称 sightName: '', // 景点列表的数据 dataList: [] } }, components: { SightItem }, ...&lt;/script&gt;分页 &lt;!-- 分页 --&gt; &lt;van-pagination v-model=\"currentPage\" :total-items=\"totalItems\" :items-per-page=\"perPage\" /&gt;双向绑定当前页数&lt;script&gt;...export default { data () { return { ... // 当前页面号 currentPage: 1, // 总页面数 totalItems: 0, // 一个页面展示的页码数 perPage: 5 } }, ...&lt;/script&gt;页脚（复用） &lt;!-- 页脚 --&gt; &lt;footer-bar/&gt;引入组件&lt;script&gt;...// 页脚import FooterBar from '@/components/common/FooterBar'export default { ... components: { ... FooterBar }, ...&lt;/script&gt;3、添加路由（@/router/index）引入页面import SearchView from '../views/SearchView.vue'编辑路由const routes = [ ... { path: '/search', name: 'search', component: SearchView }]实现页脚的跳转(@/components/common/FooterBar)&lt;template&gt;&lt;!-- 底部导航栏（公共组件） --&gt; &lt;van-tabbar v-model=\"active\"&gt; &lt;van-tabbar-item name=\"home\" icon=\"wap-home-o\" :to=\"{name: 'home'}\"&gt;首页&lt;/van-tabbar-item&gt; &lt;van-tabbar-item name=\"search\" icon=\"search\" :to=\"{name: 'search'}\"&gt;搜索&lt;/van-tabbar-item&gt; &lt;van-tabbar-item name=\"mine\" icon=\"user-o\"&gt;我的&lt;/van-tabbar-item&gt; &lt;/van-tabbar&gt;&lt;/template&gt;" }, { "title": "1.130-vue-router的引入", "url": "/posts/vue-router/", "categories": "Online_traveling", "tags": "django+vue", "date": "2022-09-03 10:00:00 +0000", "snippet": "安装vue-router插件npm install vue-router -S配置路由规则（@/router/index.js）使用vue-routerimport Vue from 'vue'import VueRouter from 'vue-router'Vue.use(VueRouter)配置路由跳转规则（去到哪个组件）const routes = [ { path: '/'...", "content": "安装vue-router插件npm install vue-router -S配置路由规则（@/router/index.js）使用vue-routerimport Vue from 'vue'import VueRouter from 'vue-router'Vue.use(VueRouter)配置路由跳转规则（去到哪个组件）const routes = [ { path: '/', name: 'home', component: HomeView }]全域声明const router = new VueRouter({ routes})export default routermain.js中使用vue-routerwindow.app = new Vue({ router, // 使用vue-router store, render: h =&gt; h(App)}).$mount('#app')路由的使用组件渲染的位置(会自动替换并渲染)&lt;router-view&gt;&lt;/router-view&gt;模板中实现跳转（跳转触发器(a标签)）&lt;router-link to=\"/about\"&gt;&lt;/router-link&gt;动态路由匹配匹配参数设置动态匹配规则，参数为:nameconst router = new VueRouter({ routes: [ { path: '/detail/:id', component:Detail } ]})在组件中获取匹配参数和查询（/sight/list/456）JavaScript中获取参数let id = this.$route.params.id动态响应参数变化（监听）watch: { $route(to, from){ // 对路有变化作出响应 this.id = this.$route.params.id }, id (to, from){ // 还可以监听data里的变量变化 }}查询参数不需要设置动态匹配规则在组件中获取查询参数和查询（/sight/list/456?name=456）JavaScript中获取参数let name = this.$route.query.name获取多个查询参数（/sight/list/456?name=456&amp;sort=asc）JavaScript中获取参数let name = this.$route.query.namelet sort = this.$route.query.sort页面跳转在模板中跳转&lt;template&gt; &lt;router-link to=\"/sight/sight/list\"&gt;&lt;/router-link&gt;&lt;/template&gt;&lt;template&gt; &lt;router-link :to='\"/sight/\" + id + \"/\" + types'&gt;&lt;/router-link&gt;&lt;/template&gt;&lt;script&gt; export default { data () { return { id: 456, types: 'type2' } } }&lt;/script&gt;&lt;template&gt; &lt;router-link :to=\"{ path:'/sight/' + id }\"&gt;&lt;/router-link&gt;&lt;/template&gt;&lt;script&gt; export default { data () { return { id: 456 } } }&lt;/script&gt;&lt;template&gt; &lt;router-link :to=\"{path: '/sight', query: { id: 'this.id'}}\"&gt;&lt;/router-link&gt;&lt;/template&gt;&lt;script&gt; export default { data () { return { id: 456 } } }&lt;/script&gt;路由命名取名字（@/router/index.js）const routes = [ { path: '/', name: 'home', // 取名 component: HomeView }]按照名字跳转&lt;template&gt; &lt;router-link :to=\"{name:'home', params: {types: 'types2'}, query: {id: 'this.id'}}\"&gt;&lt;/router-link&gt;&lt;/template&gt;&lt;script&gt; export default { data () { return { id: 456 } } }&lt;/script&gt;在JS中跳转（this.$router.push）跳转至指定页&lt;template&gt; &lt;a href=\"javascript:;\" @click=\"goHome\"&gt;&lt;/a&gt;&lt;/template&gt;&lt;script&gt; export default { methods: { goHome () { this.$router.push({name: 'home', params: {types: 'types2'}, query: {id: 'this.id'}}) } } }&lt;/script&gt;页面前进或后退（this.$router.go）this.$router.go(n)前进this.$router.go(1)后退this.$router.go(-1)替换浏览历史（替换当前页面并且不能后退）this.$router.replace(location, onComplete?, onAbort?)" }, { "title": "1.124-sight接口联调", "url": "/posts/sight-check/", "categories": "Online_traveling", "tags": "django+vue", "date": "2022-09-02 10:00:00 +0000", "snippet": "前端将接口写入前端记录后端地址（@/utils/apis）加入景点模块的接口/** * 景点模块的接口 */const SightApis = { // 景点列表 sightListUrl: apiHost + '/sight/sight/list/'}全局注册export { ... SightApis}创建方法访问地址（@/components/home/HotBox）引...", "content": "前端将接口写入前端记录后端地址（@/utils/apis）加入景点模块的接口/** * 景点模块的接口 */const SightApis = { // 景点列表 sightListUrl: apiHost + '/sight/sight/list/'}全局注册export { ... SightApis}创建方法访问地址（@/components/home/HotBox）引入异步请求库和已经写好的路由地址&lt;script&gt;import { ajax } from '@/utils/ajax'import { SightApis } from '@/utils/apis'&lt;/script&gt;创建访问函数(需要传递参数)&lt;script&gt;...export default { ... methods: { /** * 获取热门景点数据 */ getDataList () { ajax.get(SightApis.sightListUrl, { params: { // 传递GET参数 is_hot: 1 } }).then(({data}) =&gt; { // 解构赋值 this.dataList = data.objects }) } }, ...}&lt;/script&gt;调用函数&lt;script&gt;...export default { ... created () { this.getDataList() ... }}&lt;/script&gt;校正模板中渲染的变量名&lt;template&gt; &lt;!-- 热门景点 --&gt; &lt;div class=\"home-hot-box\"&gt; &lt;!-- 顶上导航 --&gt; &lt;van-cell title=\"热门推荐\" icon=\"/static/home/hot/fire.png\" value=\"全部榜单\" title-style=\"text-align:left\" is-link/&gt; &lt;!-- // 顶上导航 --&gt; &lt;!-- 景点列表 --&gt; &lt;div class=\"box-main\"&gt; &lt;a href=\"#\" class=\"hot-item\" v-for=\"item in dataList\" :key=\"item.id\"&gt; &lt;div class=\"img\"&gt; &lt;span&gt;&lt;/span&gt; &lt;img :src=\"item.main_img\" alt=\"\"&gt; // 修改 &lt;/div&gt; &lt;h5 class=\"van-ellipsis\"&gt;&lt;/h5&gt; &lt;div class=\"line-price\"&gt; &lt;span class=\"price\"&gt;￥&lt;/span&gt;起 //修改 &lt;/div&gt; &lt;/a&gt; &lt;/div&gt; &lt;!-- // 景点列表 --&gt; &lt;/div&gt;&lt;/template&gt;创建方法访问地址（@/components/home/FineBox）引入异步请求库和已经写好的路由地址&lt;script&gt;import { ajax } from '@/utils/ajax'import { SightApis } from '@/utils/apis'&lt;/script&gt;创建访问函数(需要传递参数)&lt;script&gt;...export default { ... methods: { /** * 获取精选景点数据 */ getDataList () { ajax.get(SightApis.sightListUrl, { params: { is_top: 1 } }).then(({data}) =&gt; { this.dataList = data.objects }) } }, ...}&lt;/script&gt;调用函数&lt;script&gt;...export default { ... created () { this.getDataList() ... }}&lt;/script&gt;校正子组件模板中渲染的变量名（@/components/common/ListSight.vue)&lt;template&gt; &lt;a href=\"#\" class=\"sight-item\"&gt; &lt;!-- 左边的图片 --&gt; &lt;img :src=\"localItem.main_img\" :alt=\"localItem.name\"&gt; // 修改 &lt;!-- 右边的文字 --&gt; &lt;div class=\"right\"&gt; &lt;h5&gt;&lt;/h5&gt; &lt;van-rate readonly v-model=\"localItem.score\" allow-half color=\"#ffd21e\" void-icon=\"star\" void-color=\"#eee\" /&gt; &lt;div class=\"tips\"&gt;人点评 | 100%满意&lt;/div&gt; &lt;div class=\"tips light\"&gt;-&lt;/div&gt; // 修改 &lt;div class=\"line-price\"&gt;￥ 起&lt;/div&gt; // 修改 &lt;/div&gt; &lt;/a&gt;&lt;/template&gt;" }, { "title": "1.123-system接口联调", "url": "/posts/system-check/", "categories": "Online_traveling", "tags": "django+vue", "date": "2022-08-30 10:00:00 +0000", "snippet": "前端将接口写入前端记录后端地址（@/utils/apis）加入固定的地址前缀const apiHost = 'http://127.0.0.1:8000'为了解决跨域问题，已经在vue.config.js中进行了改写，访问后端接口可以使用（/api 开头的链接会自动改写为http://127.0.0.1:8000）const apiHost = 'http://127.0.0.1:8080/...", "content": "前端将接口写入前端记录后端地址（@/utils/apis）加入固定的地址前缀const apiHost = 'http://127.0.0.1:8000'为了解决跨域问题，已经在vue.config.js中进行了改写，访问后端接口可以使用（/api 开头的链接会自动改写为http://127.0.0.1:8000）const apiHost = 'http://127.0.0.1:8080/api'加入系统模块的接口/** * 系统模块的接口 */const SystemApis = { // 轮播图列表 sliderListUrl: apiHost + '/system/slider/list/'}全局注册export { ... SystemApis}创建方法访问地址（@/components/home/BannerBox）引入异步请求库和已经写好的路由地址&lt;script&gt;import { ajax } from '@/utils/ajax'import { SystemApis } from '@/utils/apis'&lt;/script&gt;创建访问函数&lt;script&gt;...export default { ... methods: { /** * 获取轮播图数据 */ getDataList () { ajax.get(SystemApis.sliderListUrl).then(res =&gt; { console.log('res:', res) this.bannerList = res.data.objects // 获取 }) } }, ...}&lt;/script&gt;调用函数&lt;script&gt;...export default { ... created () { this.getDataList() ... }}&lt;/script&gt;校正模板中渲染的变量名&lt;template&gt;&lt;!-- 首页轮播图 --&gt; &lt;div class=\"home-banner-box\"&gt; &lt;van-swipe class=\"my-swipe\" :autoplay=\"3000\" indicator-color=\"white\"&gt; &lt;van-swipe-item v-for=\"item in bannerList\" :key=\"item.id\"&gt; &lt;img :src=\"item.img_url\" alt=\"\"&gt; // 与传输一致 &lt;/van-swipe-item&gt; &lt;/van-swipe&gt; &lt;/div&gt;&lt;/template&gt;后端加入媒体url(settings.py)使从后端获取的图片url自动填充成全路径MEDIA_URL = 'http://localhost:8080'" }, { "title": "1.122-sight模块(景点列表接口开发)", "url": "/posts/sight-django/", "categories": "Online_traveling", "tags": "django+vue", "date": "2022-08-30 10:00:00 +0000", "snippet": "后端sight模块1、创建sight模块python manage.py startapp sight2、添加进INSTALL_APPS(traveling_django/settings.py)INSTALLED_APPS = [\t... 'sight.apps.SightConfig',]3、ORM模型ORM模型设计（sight/models.py）景点模型from django....", "content": "后端sight模块1、创建sight模块python manage.py startapp sight2、添加进INSTALL_APPS(traveling_django/settings.py)INSTALLED_APPS = [\t... 'sight.apps.SightConfig',]3、ORM模型ORM模型设计（sight/models.py）景点模型from django.db import models# Create your models here.class Sight(models.Model): \"\"\" 景点基础信息 \"\"\" name = models.CharField('名称', max_length=64) desc = models.CharField('描述', max_length=256) main_img = models.ImageField('主图', upload_to='%Y%m/sight/', max_length=256) banner_img = models.ImageField('详情主图', upload_to='%Y%m/sight/', max_length=256) content = models.TextField('详细') score = models.FloatField('评分', default=5) min_price = models.FloatField('最低价格', default=0) province = models.CharField('省份', max_length=32) city = models.CharField('市区', max_length=32) area = models.CharField('区/县', max_length=32, null=True) town = models.CharField('乡镇', max_length=32, null=True) is_top = models.BooleanField('是否为精选景点', default=False) is_hot = models.BooleanField('是否为热门景点', default=False) is_valid = models.BooleanField('是否有效', default=True) created_at = models.DateTimeField('创建时间', auto_now_add=True) updated_at = models.DateTimeField('修改时间', auto_now=True) class Meta: db_table = 'sight' ordering = ['-updated_at']同步模型检查语法python manage.py check生成同步原语python manage.py makemigrations同步模型至数据库 python manage.py migrate4、接口实现4.1、设计接口返回标准定义接口返回结构{meta: 源数据objects: 数据列表（数组）}接口错误信息约定（RESTful）GET安全且幂等获取表示变更时获取表示（缓存）200（OK） - 表示已在响应中发出204（无内容） - 资源有空表示301（Moved Permanently） - 资源的URI已被更新303（See Other） - 其他（如，负载均衡）304（not modified）- 资源未更改（缓存）400 （bad request）- 指代坏请求（如，参数错误）404 （not found）- 资源不存在406 （not acceptable）- 服务端不支持所需表示500 （internal server error）- 通用错误响应503 （Service Unavailable）- 服务端当前无法处理请求POST不安全且不幂等使用服务端管理的（自动产生）的实例号创建资源创建子资源部分更新资源如果没有被修改，则不过更新资源（乐观锁）200（OK）- 如果现有资源已被更改201（created）- 如果新资源被创建202（accepted）- 已接受处理请求但尚未完成（异步处理）301（Moved Permanently）- 资源的URI被更新303（See Other）- 其他（如，负载均衡）400（bad request）- 指代坏请求404 （not found）- 资源不存在406 （not acceptable）- 服务端不支持所需表示409 （conflict）- 通用冲突412 （Precondition Failed）- 前置条件失败（如执行条件更新时的冲突）415 （unsupported media type）- 接受到的表示不受支持500 （internal server error）- 通用错误响应503 （Service Unavailable）- 服务当前无法处理请求4.2、编写接口代码根模块下的urls.py中声明（traveling_django/urls.py）urlpatterns = [ ... # 景点模块 path('sight/', include('sight.urls')),]分配url地址（sight/urls.py）from django.urls import pathfrom sight import viewsurlpatterns = [ # 景点列表接口 path('sight/list/', views.SightListView.as_view(), name='sight_list'),]编写视图函数（需要分页）使用分页模型class SightListView(ListView): \"\"\" 景点列表 \"\"\" paginate_by = 5 # 分页，每页放五条数据重写查询方法（需要实现查询热门景点、精选经典和按景点名称查询） def get_queryset(self): \"\"\" 重写查询方法 \"\"\" query = Q(is_valid=True) # 1. 热门景点 is_hot = self.request.Get.get('is_hot', None) if is_hot: query = query &amp; Q(is_hot=True) # 2. 精选景点 is_top = self.request.Get.get('is_top', None) if is_top: query = query &amp; Q(is_top=True) # TODO 3. 景点名称搜索 query_set = Sight.objects.filter(query) return query_set重写返回方法 def render_to_response(self, context, **response_kwargs):获得数据包 page_obj = context['page_obj']设定返回结构 data = { 'meta': { 'total_count': page_obj.paginator.count, 'page_count': page_obj.paginator.num_pages, 'current_page': page_obj.number }, # 'objects': page_obj.object_list -&gt; 不能直接序列化为json对象 'objects': [] }手动序列化objects里要携带的数据 for item in page_obj.object_list: data['objects'].append({ 'id': item.id, 'name': item.name, 'main_img': item.main_img.url, 'score': item.score, 'province': item.province, 'min_price': item.min_price, 'city': item.city, # TODO 'comment_count': 0 })将返回类型设定为JSON对象 return http.JsonResponse(data)4.3、模拟HTTP请求，测试验证接口" }, { "title": "1.121-system模块(轮播图接口开发)", "url": "/posts/system-django/", "categories": "Online_traveling", "tags": "django+vue", "date": "2022-08-24 10:00:00 +0000", "snippet": "后端system模块1、创建system模块python manage.py startapp system2、添加进INSTALL_APPS(traveling_django/settings.py)INSTALLED_APPS = [\t... 'system.apps.SystemConfig',]3、ORM模型ORM模型设计（system/models.py）轮播图模型from ...", "content": "后端system模块1、创建system模块python manage.py startapp system2、添加进INSTALL_APPS(traveling_django/settings.py)INSTALLED_APPS = [\t... 'system.apps.SystemConfig',]3、ORM模型ORM模型设计（system/models.py）轮播图模型from django.db import models# Create your models here.class Slider(models.Model): name = models.CharField('名称', max_length=32) desc = models.CharField('描述', max_length=100, null=True, blank=True) types = models.SmallIntegerField('展现的位置', default=10) img = models.ImageField('图片地址', max_length=255, upload_to='%Y%m/slider') reorder = models.SmallIntegerField('排序字段', default=0, help_text='数字越大越靠前') start_time = models.DateTimeField('生效开始时间', null=True, blank=True) end_time = models.DateTimeField('生效开始时间', null=True, blank=True) target_url = models.CharField('跳转的地址', max_length=100, null=True, blank=True) is_valid = models.BooleanField('是否有效', default=True) created_at = models.DateTimeField('创建时间', auto_now_add=True) updated_at = models.DateTimeField('修改时间', auto_now=True) class Meta: db_table = 'system_slider' ordering = ['-reorder']同步模型检查语法python manage.py check生成同步原语python manage.py makemigrations同步模型至数据库 python manage.py migrate4、接口实现4.1、设计接口返回标准定义接口返回结构{meta: 源数据objects: 数据列表（数组）}接口错误信息约定（RESTful）GET安全且幂等获取表示变更时获取表示（缓存）200（OK） - 表示已在响应中发出204（无内容） - 资源有空表示301（Moved Permanently） - 资源的URI已被更新303（See Other） - 其他（如，负载均衡）304（not modified）- 资源未更改（缓存）400 （bad request）- 指代坏请求（如，参数错误）404 （not found）- 资源不存在406 （not acceptable）- 服务端不支持所需表示500 （internal server error）- 通用错误响应503 （Service Unavailable）- 服务端当前无法处理请求POST不安全且不幂等使用服务端管理的（自动产生）的实例号创建资源创建子资源部分更新资源如果没有被修改，则不过更新资源（乐观锁）200（OK）- 如果现有资源已被更改201（created）- 如果新资源被创建202（accepted）- 已接受处理请求但尚未完成（异步处理）301（Moved Permanently）- 资源的URI被更新303（See Other）- 其他（如，负载均衡）400（bad request）- 指代坏请求404 （not found）- 资源不存在406 （not acceptable）- 服务端不支持所需表示409 （conflict）- 通用冲突412 （Precondition Failed）- 前置条件失败（如执行条件更新时的冲突）415 （unsupported media type）- 接受到的表示不受支持500 （internal server error）- 通用错误响应503 （Service Unavailable）- 服务当前无法处理请求4.2、编写接口代码根模块下的urls.py中声明（traveling_django/urls.py）urlpatterns = [ ... # 系统模块 path('system/', include('system.urls'))]编写视图函数from django import httpfrom django.http import HttpResponsefrom django.shortcuts import renderfrom system.models import Sliderdef slider_list(request): \"\"\" 轮播图接口 [ \"meta\": {} \"objects\": [] ] \"\"\" data = { 'meta': { }, 'objects': [] } queryset = Slider.objects.filter(is_valid=True) for item in queryset: data['objects'].append({ 'id': item.id, 'img_url': item.img.url, 'target_url': item.target_url, 'name': item.name }) return http.JsonResponse(data)分配url地址（system/urls.py）from django.urls import pathfrom system import viewsurlpatterns = [ path('slider/list/', views.slider_list, name='slider+list'),]4.3、模拟HTTP请求，测试验证接口" }, { "title": "1.115-首页功能(底部导航栏组件开发)", "url": "/posts/Footer/", "categories": "Online_traveling", "tags": "django+vue", "date": "2022-08-24 10:00:00 +0000", "snippet": "前端底部导航栏组件(@/home/FineBox)1、VantUI中找组件Tabbar标签栏（通过名称匹配）&lt;van-tabbar v-model=\"active\"&gt; &lt;van-tabbar-item name=\"home\" icon=\"home-o\"&gt;标签&lt;/van-tabbar-item&gt; &lt;van-tabbar-item name=\"sea...", "content": "前端底部导航栏组件(@/home/FineBox)1、VantUI中找组件Tabbar标签栏（通过名称匹配）&lt;van-tabbar v-model=\"active\"&gt; &lt;van-tabbar-item name=\"home\" icon=\"home-o\"&gt;标签&lt;/van-tabbar-item&gt; &lt;van-tabbar-item name=\"search\" icon=\"search\"&gt;标签&lt;/van-tabbar-item&gt; &lt;van-tabbar-item name=\"friends\" icon=\"friends-o\"&gt;标签&lt;/van-tabbar-item&gt; &lt;van-tabbar-item name=\"setting\" icon=\"setting-o\"&gt;标签&lt;/van-tabbar-item&gt;&lt;/van-tabbar&gt;export default { data() { return { active: 'home', // 高亮 }; },};路由模式&lt;router-view /&gt;&lt;van-tabbar route&gt; &lt;van-tabbar-item replace to=\"/home\" icon=\"home-o\"&gt;标签&lt;/van-tabbar-item&gt; &lt;van-tabbar-item replace to=\"/search\" icon=\"search\"&gt;标签&lt;/van-tabbar-item&gt;&lt;/van-tabbar&gt;图标&lt;van-icon name=\"wap-home-o\" /&gt;&lt;van-icon name=\"user-o\" /&gt;2、模板&lt;template&gt;&lt;!-- 底部导航栏（公共组件） --&gt; &lt;van-tabbar v-model=\"active\"&gt; &lt;van-tabbar-item name=\"home\" icon=\"wap-home-o\"&gt;首页&lt;/van-tabbar-item&gt; &lt;van-tabbar-item name=\"search\" icon=\"search\"&gt;搜索&lt;/van-tabbar-item&gt; &lt;van-tabbar-item name=\"mine\" icon=\"user-o\"&gt;我的&lt;/van-tabbar-item&gt; &lt;/van-tabbar&gt;&lt;/template&gt;3、样式4、Home页面中引用轮播图组件(@/views/HomeView)引入组件&lt;script&gt;...// footerimport FooterBar from '@/components/common/FooterBar'export default { name: 'HomeView', components: { ... // FooterBar FooterBar }}&lt;/script&gt;展示&lt;template&gt; &lt;div class=\"home\"&gt; ... &lt;!-- Footer --&gt; &lt;footer-bar/&gt; &lt;/div&gt;&lt;/template&gt;5、填充数据&lt;script&gt;export default { data () { return { active: 'home' } }}&lt;/script&gt;6、优化样式" }, { "title": "1.114-首页功能(景点列表组件开发)", "url": "/posts/ListSight/", "categories": "Online_traveling", "tags": "django+vue", "date": "2022-08-23 10:00:00 +0000", "snippet": "前端景点列表组件(@/components/common/ListSight)1、从精选经典组件中复制景点列表组件模板&lt;template&gt; &lt;a href=\"#\" class=\"sight-item\"&gt; &lt;!-- 左边的图片 --&gt; &lt;img src=\"/static/home/hot/h1.jpg\" alt=\"\"&gt; &lt...", "content": "前端景点列表组件(@/components/common/ListSight)1、从精选经典组件中复制景点列表组件模板&lt;template&gt; &lt;a href=\"#\" class=\"sight-item\"&gt; &lt;!-- 左边的图片 --&gt; &lt;img src=\"/static/home/hot/h1.jpg\" alt=\"\"&gt; &lt;!-- 右边的文字 --&gt; &lt;div class=\"right\"&gt; &lt;h5&gt;&lt;/h5&gt; &lt;van-rate readonly v-model=\"localItem.score\" allow-half :size=\"25\" color=\"#ffd21e\" void-icon=\"star\" void-color=\"#eee\" /&gt; &lt;div class=\"tips\"&gt;4人点评 | 100%满意&lt;/div&gt; &lt;div class=\"tips light\"&gt;广东-广州&lt;/div&gt; &lt;div class=\"line-price\"&gt;￥ 起&lt;/div&gt; &lt;/div&gt; &lt;/a&gt;&lt;/template&gt;样式&lt;style lang=\"less\"&gt;.sight-item { display: flex; margin-top: 10px; border-bottom: 1px solid #f6f6f6; // 下划线 img { width: 100px; height: 100px; } .right { text-align: left; // 让文字向左对齐 flex-grow: 1; // 撑满整个区域 padding-left: 5px; position: relative; // 绝对定位 h5 { color: #212121; font-size: 14px; padding: 5px 0; margin: 0; } .line-price { // 绝对于整个容器定位 position: absolute; right: 10px; top: 20px; display: inline-block; color: #f50; font-size: 16px; // 字体大小 font-weight: bold; // 字体加粗 } .tips { font-size: 12px; color: #666; &amp;.light { // 让下面的字体浅色一点 color: #999; } } }}&lt;/style&gt;2、解决父子传值问题（props）子组件（@/components/common/ListSight）只写props不把他变成本地变量的话eslint会报错说 Unexpected mutation of “item” prop（防止子组件修改父变量）&lt;script&gt;export default { props : ['item'], // 与父组件传递的值不同名也没关系 data: function () { // 把他变成本地变量 return { localItem: this.item } }}&lt;/script&gt;父组件import子组件&lt;script&gt;import SightItem from '@/components/common/ListSight'export default { components: { SightItem }, data () { return { dataList: [] } },}模板中使用v-bind语法传递对象&lt;template&gt; &lt;sight-item v-for=\"item in dataList\" // 使用v-for多次复用 :key=\"item.id\" // v-for指定key :item=\"item\"/&gt; // 传递item值！！！&lt;/template&gt;" }, { "title": "1.113-首页功能(精选景点组件开发)", "url": "/posts/FineBox/", "categories": "Online_traveling", "tags": "django+vue", "date": "2022-08-22 10:00:00 +0000", "snippet": "前端精选景点组件(@/home/FineBox)1、VantUI中找组件找到左右结构的单元格作为顶部单元格&lt;van-cell-group&gt; &lt;van-cell title=\"单元格\" value=\"内容\" /&gt; &lt;van-cell title=\"单元格\" value=\"内容\" label=\"描述信息\" /&gt;&lt;/van-cell-group&gt;...", "content": "前端精选景点组件(@/home/FineBox)1、VantUI中找组件找到左右结构的单元格作为顶部单元格&lt;van-cell-group&gt; &lt;van-cell title=\"单元格\" value=\"内容\" /&gt; &lt;van-cell title=\"单元格\" value=\"内容\" label=\"描述信息\" /&gt;&lt;/van-cell-group&gt;顶部单元格内的图标&lt;van-icon name=\"location-o\" /&gt;评分组件&lt;van-rate v-model=\"value\" allow-half :size=\"25\" color=\"#ffd21e\" void-icon=\"star\" void-color=\"#eee\"/&gt;export default { data() { return { value: 3, }; },};2、模板顶部单元格&lt;template&gt; &lt;!-- 精选景点 --&gt; &lt;div class=\"home-fine-box\"&gt; &lt;!-- 顶上导航 --&gt; &lt;van-cell title=\"精选景点\" icon=\"location-o\" value=\"更多\" title-style=\"text-align:left\" is-link/&gt; &lt;!-- // 顶上导航 --&gt; &lt;/div&gt;&lt;/template&gt;景点列表\t&lt;!-- 景点列表 --&gt; &lt;div class=\"box-main\"&gt; ... &lt;/div&gt; &lt;!-- // 景点列表 --&gt;分为左右结构左边图片\t&lt;div class=\"box-main\"&gt; &lt;a href=\"#\" class=\"sight-item\"&gt; &lt;!-- 左边的图片 --&gt; &lt;img src=\"/static/home/hot/h1.jpg\" alt=\"\"&gt; &lt;/a&gt; &lt;/div&gt; &lt;!-- // 景点列表 --&gt;右边文字景点标题\t&lt;div class=\"box-main\"&gt; &lt;a href=\"#\" class=\"sight-item\"&gt; ... &lt;!-- 右边的文字 --&gt; &lt;div class=\"right\"&gt; &lt;h5&gt;标题&lt;/h5&gt; &lt;/div&gt; &lt;/a&gt; &lt;/div&gt; &lt;!-- // 景点列表 --&gt;评分星星\t&lt;div class=\"box-main\"&gt; &lt;a href=\"#\" class=\"sight-item\"&gt; ... &lt;!-- 右边的文字 --&gt; &lt;div class=\"right\"&gt; ... &lt;van-rate readonly v-model=\"value\" allow-half :size=\"25\" color=\"#ffd21e\" void-icon=\"star\" void-color=\"#eee\" /&gt; &lt;/div&gt; &lt;/a&gt; &lt;/div&gt; &lt;!-- // 景点列表 --&gt;点评和满意度、城市、价格(tips light 并列标签)\t&lt;div class=\"box-main\"&gt; &lt;a href=\"#\" class=\"sight-item\"&gt; ... &lt;!-- 右边的文字 --&gt; &lt;div class=\"right\"&gt; ... &lt;div class=\"tips\"&gt;4人点评 | 100%满意&lt;/div&gt; &lt;div class=\"tips light\"&gt;广东-广州&lt;/div&gt; &lt;div class=\"line-price\"&gt;￥ 98 起&lt;/div&gt; &lt;/div&gt; &lt;/a&gt; &lt;/div&gt; &lt;!-- // 景点列表 --&gt;3、样式实现左右结构&lt;style lang=\"less\"&gt;.home-fine-box { .box-main { // 景点列表 .sight-item { display: flex; img { // 填充满左半部分 width: 100px; height: 100px; } } }}&lt;/style&gt;right:右边文字&lt;style lang=\"less\"&gt;.home-fine-box { .box-main { // 景点列表 .sight-item { ... .right { text-align: left; // 让文字向左对齐 flex-grow: 1; // 撑满整个区域 padding-left: 5px; position: relative; // 绝对定位 } } }}&lt;/style&gt;h5:景点标题样式&lt;style lang=\"less\"&gt;.home-fine-box { .box-main { // 景点列表 .sight-item { ... .right { \t... \th5 { color: #212121; font-size: 14px; padding: 5px 0; margin: 0; } } } }}&lt;/style&gt;line-price:价格&lt;style lang=\"less\"&gt;.home-fine-box { .box-main { // 景点列表 .sight-item { ... .right { \t... \t.line-price { // 绝对于整个容器定位 position: absolute; right: 10px; top: 20px; display: inline-block; color: #f50; font-size: 16px; // 字体大小 font-weight: bold; // 字体加粗 } } } }}&lt;/style&gt;tips:满意度和地区文字&lt;style lang=\"less\"&gt;.home-fine-box { .box-main { // 景点列表 .sight-item { ... .right { \t... \t.tips { font-size: 12px; color: #666; &amp;.light { // 让下面的字体浅色一点 color: #999; } } } } }}&lt;/style&gt;4、Home页面中引用轮播图组件(@/views/HomeView)引入组件&lt;script&gt;...// fineimport Fine from '@/components/home/FineBox'export default { name: 'HomeView', components: { ... // fine Fine }}&lt;/script&gt;展示&lt;template&gt; &lt;div class=\"home\"&gt; ... &lt;!-- fine --&gt; &lt;Fine/&gt; &lt;/div&gt;&lt;/template&gt;5、填充数据准备数据&lt;script&gt;export default { data () { return { dataList: [] } }, created () { this.dataList = [ {id: 1, name: '景点名称', score: 5, price: 98}, {id: 2, name: '景点名称', score: 4.5, price: 98}, {id: 3, name: '景点名称', score: 4, price: 98}, {id: 4, name: '景点名称', score: 4.5, price: 98}, {id: 5, name: '景点名称', score: 4.5, price: 98} ] }}&lt;/script&gt;模型中进行绑定&lt;template&gt; &lt;!-- 精选景点 --&gt; &lt;div class=\"home-fine-box\"&gt; ... &lt;!-- 景点列表 --&gt; &lt;div class=\"box-main\"&gt; &lt;a href=\"#\" class=\"sight-item\" v-for=\"item in dataList\" :key=\"item.id\"&gt; &lt;!-- 左边的图片 --&gt; &lt;img src=\"/static/home/hot/h1.jpg\" alt=\"\"&gt; &lt;!-- 右边的文字 --&gt; &lt;div class=\"right\"&gt; &lt;h5&gt;&lt;/h5&gt; &lt;van-rate readonly v-model=\"item.score\" allow-half :size=\"25\" color=\"#ffd21e\" void-icon=\"star\" void-color=\"#eee\" /&gt; &lt;div class=\"tips\"&gt;4人点评 | 100%满意&lt;/div&gt; &lt;div class=\"tips light\"&gt;广东-广州&lt;/div&gt; &lt;div class=\"line-price\"&gt;￥ 起&lt;/div&gt; &lt;/div&gt; &lt;/a&gt; &lt;/div&gt; &lt;!-- // 景点列表 --&gt; &lt;/div&gt;&lt;/template&gt;6、优化样式景点图片和边框脱离重合&lt;style lang=\"less\"&gt;.home-fine-box { .box-main { // 景点列表 padding: 0 10px; padding-bottom: 50px; .van-cell { padding: 10px 0; } ... }}&lt;/style&gt;添加下划线.home-fine-box { .box-main { // 景点列表 padding: 0 10px; .van-cell { padding: 10px 0; } .sight-item { display: flex; margin-top: 10px; border-bottom: 1px solid #f6f6f6; // 下划线 ... } }}&lt;/style&gt;" }, { "title": "1.112-首页功能(热门推荐组件开发)", "url": "/posts/HotBox/", "categories": "Online_traveling", "tags": "django+vue", "date": "2022-08-21 10:00:00 +0000", "snippet": "前端热门推荐组件(@/home/HotBox)1、VantUI中找到左右结构的单元格&lt;van-cell-group&gt; &lt;van-cell title=\"单元格\" value=\"内容\" /&gt; &lt;van-cell title=\"单元格\" value=\"内容\" label=\"描述信息\" /&gt;&lt;/van-cell-group&gt;只需要一行单元格，改写...", "content": "前端热门推荐组件(@/home/HotBox)1、VantUI中找到左右结构的单元格&lt;van-cell-group&gt; &lt;van-cell title=\"单元格\" value=\"内容\" /&gt; &lt;van-cell title=\"单元格\" value=\"内容\" label=\"描述信息\" /&gt;&lt;/van-cell-group&gt;只需要一行单元格，改写单元格&lt;template&gt; &lt;!-- 热门景点 --&gt; &lt;div class=\"home-hot-box\"&gt; &lt;!-- 顶上导航 --&gt; &lt;van-cell title=\"热门推荐\" icon=\"/static/home/hot/fire.png\" value=\"全部榜单\" is-link/&gt; &lt;!-- // 顶上导航 --&gt; &lt;!-- 景点列表 --&gt; &lt;!-- // 景点列表 --&gt; &lt;/div&gt;&lt;/template&gt;标题过长使用省略号省略的功能实现white-space: nowrap; // 严格的不换行text-overflow: ellipsis; // 省略号或使用内置样式&lt;!-- 最多显示一行 --&gt;&lt;div class=\"van-ellipsis\"&gt;这是一段最多显示一行的文字，多余的内容会被省略&lt;/div&gt;2、模板顶部导航栏&lt;!-- 顶上导航 --&gt; &lt;van-cell title=\"热门推荐\" icon=\"/static/home/hot/fire.png\" value=\"全部榜单\" title-style=\"text-align:left\" is-link/&gt; &lt;!-- // 顶上导航 --&gt;box-main:景点列表 &lt;!-- 景点列表 --&gt; &lt;div class=\"box-main\"&gt; ... &lt;/div&gt; &lt;!-- // 景点列表 --&gt;hot-item:单个景点（景点图片、景点标题、价格） &lt;a href=\"#\" class=\"hot-item\"&gt; \t... &lt;/a&gt;img:景点图片 &lt;div class=\"img\"&gt; &lt;span&gt;&lt;/span&gt; &lt;img src=\"/static/home/hot/h1.jpg\" alt=\"\"&gt; &lt;/div&gt;景点标题 &lt;h5 class=\"van-ellipsis\"&gt;景点标题&lt;/h5&gt;line-price:价格 &lt;div class=\"line-price\"&gt; &lt;span class=\"price\"&gt;￥67&lt;/span&gt;起 &lt;/div&gt;3、样式&lt;style lang=\"less\"&gt;.home-hot-box{ // 写入大类里，防止覆盖 ...}热门框的宽度和样式 .box-main{ width: 100%; // 宽度100% display: flex; padding-top: 10px; // 滚动条 overflow-x: scroll; // 水平滚动条 }单个热门景点的样式 .hot-item { display: flex; flex-direction: column; // 横向 width: 100px; margin-right: 10px; padding-bottom: 10px; ... }图片样式 .img { position: relative; span { position: absolute; left: 0; top: 0; display: inline-block; width: 42px; height: 20px; z-index: 10; } img { width: 100px; height: 100px; } }标题样式 h5 { color: #212121; padding: 2px 0; font-size: 12px; }价格样式 .line-price { color: #212121; font-size: 12px; .price { color: #f50; font-size: 13px; } }Top标签的样式（伪类选择器） // 伪类选择器 &amp;:nth-child(1) .img span { background: url(../../../public/static/home/hot/top1.png) no-repeat; background-size: 100% auto; } &amp;:nth-child(2) .img span { background: url(../../../public/static/home/hot/top2.png) no-repeat; background-size: 100% auto; } &amp;:nth-child(3) .img span { background: url(../../../public/static/home/hot/top3.png) no-repeat; background-size: 100% auto; }4、Home页面中引用轮播图组件(@/views/HomeView)引入组件&lt;script&gt;// bannerimport Banner from '@/components/home/BannerBox'// hotimport Hot from '@/components/home/HotBox'export default { name: 'HomeView', components: { // banner Banner， // hot Hot }}&lt;/script&gt;展示&lt;template&gt; &lt;div class=\"home\"&gt; &lt;!-- banner --&gt; &lt;Banner/&gt; &lt;!-- hot --&gt; &lt;Hot/&gt; &lt;/div&gt;&lt;/template&gt;5、填充数据data中创建用于存放对象的数组&lt;script&gt;export default { data() { return { dataList: [] } }, ...}&lt;/script&gt;将数据放入data created () { this.dataList = [ {id: 1, img: '/static/home/hot/h1.jpg', name: '景点名称', price: 65}, {id: 2, img: '/static/home/hot/h2.jpg', name: '景点名称景点名称', price: 65}, {id: 3, img: '/static/home/hot/h3.jpg', name: '景点名称景点名称景点名称', price: 65}, {id: 4, img: '/static/home/hot/h4.jpg', name: '景点名称', price: 65}, {id: 5, img: '/static/home/hot/h5.jpg', name: '景点名称', price: 65}, {id: 6, img: '/static/home/hot/h6.jpg', name: '景点名称', price: 65}, {id: 7, img: '/static/home/hot/h7.jpg', name: '景点名称', price: 65}, {id: 8, img: '/static/home/hot/h8.jpg', name: '景点名称', price: 65}, {id: 9, img: '/static/home/hot/h9.jpg', name: '景点名称', price: 65}, {id: 10, img: '/static/home/hot/h10.jpg', name: '景点名称', price: 65}, ] }删去模板中多余的a标签 &lt;!-- 景点列表 --&gt; &lt;div class=\"box-main\"&gt; &lt;a href=\"#\" class=\"hot-item\" v-for=\"item in dataList\" :key=\"item.id\"&gt; &lt;div class=\"img\"&gt; &lt;span&gt;&lt;/span&gt; &lt;img :src=\"item.img\" alt=\"\"&gt; &lt;/div&gt; &lt;h5 class=\"van-ellipsis\"&gt;&lt;/h5&gt; &lt;div class=\"line-price\"&gt; &lt;span class=\"price\"&gt;￥&lt;/span&gt;起 &lt;/div&gt; &lt;/a&gt; &lt;/div&gt; &lt;!-- // 景点列表 --&gt;6、优化样式标题和价格之间的间距太大&lt;style lang=\"less\"&gt;.home-hot-box{ ... .hot-item { \t... h5 { color: #212121; padding: 2px 0; font-size: 12px; margin: 0 // 不留间隔 } }}&lt;/style&gt;景点照片两边紧贴边缘不好看&lt;style lang=\"less\"&gt;.home-hot-box{ padding: 0 10px; // 给与10像素间隔 ...}&lt;/style&gt;小火苗图标没有对齐景点照片（重写给定样式）&lt;style lang=\"less\"&gt;.home-hot-box{ ... .van-cell{ \tpadding: 10px 0; // 给与10像素间隔 \t... }}&lt;/style&gt;###" }, { "title": "1.111-首页功能(轮播图组件开发)", "url": "/posts/BannerBox/", "categories": "Online_traveling", "tags": "django+vue", "date": "2022-08-20 10:00:00 +0000", "snippet": "前端轮播图组件(@/home/BannerBox)在VantUI的展示组件中找到轮播图&lt;van-swipe class=\"my-swipe\" :autoplay=\"3000\" indicator-color=\"white\"&gt; &lt;van-swipe-item&gt;1&lt;/van-swipe-item&gt; &lt;van-swipe-item&gt;2&lt;/v...", "content": "前端轮播图组件(@/home/BannerBox)在VantUI的展示组件中找到轮播图&lt;van-swipe class=\"my-swipe\" :autoplay=\"3000\" indicator-color=\"white\"&gt; &lt;van-swipe-item&gt;1&lt;/van-swipe-item&gt; &lt;van-swipe-item&gt;2&lt;/van-swipe-item&gt; &lt;van-swipe-item&gt;3&lt;/van-swipe-item&gt; &lt;van-swipe-item&gt;4&lt;/van-swipe-item&gt;&lt;/van-swipe&gt;data里生成一个用于盛放轮播图路径的对象bannerList&lt;script&gt;export default { data () { return { bannerList: [] } }, methods: { },直接写定对象数据 created () { this.bannerList = [ { id: 1, img: '/static/home/banner/banner1.jpg' }, { id: 2, img: '/static/home/banner/banner2.jpg' }, { id: 3, img: '/static/home/banner/banner3.jpg' } ] }}&lt;/script&gt;放入BannerBox.vue中，并将要轮播的图片换成素材库里的图片（使用v-for遍历bannerList对象以获得所有的轮播图）&lt;template&gt;&lt;!-- 首页轮播图 --&gt; &lt;div class=\"home-banner-box\"&gt; &lt;van-swipe class=\"my-swipe\" :autoplay=\"3000\" indicator-color=\"white\"&gt; &lt;van-swipe-item v-for=\"item in bannerList\" :key=\"item.id\"&gt; &lt;img :src=\"item.img\" alt=\"\"&gt; &lt;/van-swipe&gt; &lt;/div&gt;&lt;/template&gt;Home页面中引用轮播图组件(@/views/HomeView)引入组件&lt;script&gt;// bannerimport Banner from '@/components/home/BannerBox'export default { name: 'HomeView', components: { // banner Banner }}&lt;/script&gt;展示&lt;template&gt; &lt;div class=\"home\"&gt; &lt;!-- banner --&gt; &lt;Banner/&gt; &lt;/div&gt;&lt;/template&gt;优化样式轮播图占比空间太大&lt;style lang=\"less\"&gt;.home-banner-box { img { width: 100%; //填满左右两边 height: auto; // 上下大小自适应 }}&lt;/style&gt;后端设计轮播图ORM模型1、分析并设计数据库模型2、编码ORM模型3、检测模型4、模型同步" }, { "title": "1.10-跨域问题的解决", "url": "/posts/cors_settings/", "categories": "Online_traveling", "tags": "django+vue", "date": "2022-08-19 10:00:00 +0000", "snippet": "Vue重定向（vue.config.js）// Node.js里的模块module.exports = { devServer: { proxy: { '/api': { target: 'http://localhost:8000', changeOrigin: true, pathRewrite: { '^ap...", "content": "Vue重定向（vue.config.js）// Node.js里的模块module.exports = { devServer: { proxy: { '/api': { target: 'http://localhost:8000', changeOrigin: true, pathRewrite: { '^api': '' } } } }}自定义请求头和携带上一次cookie（@/utils/ajax）import axios from \"axios\"export const ajax = axios.create({ headers: { source: 'h5', // 请求头1 icode: 'acbd', // 请求头2 'Content-Type': 'application/x-www-form-urlencoded' }, withCredentials: true // 是否携带上一次的cookie})异常处理ajax.interceptors.request.use(function (config) { // 发送请求之前做什么 console.log('请求拦截到了') return config}, function (error) { // 对请求错误做些什么 return Promise.reject(error)})ajax.interceptors.request.use(function (response) { // 对响应数据做点什么 console.log('相应拦截到了') return response}, function (error) { if (error.response.status === 401) { window.alert('未登录， 即将跳转到登陆页面') } else if (error.response.status === 500) { window.alert('服务器正忙，请稍后') } return Promise.reject(error)})将Vue赋值给window.app(main.js)window.app = new Vue({ router, store, render: h =&gt; h(App)}).$mount('#app')Django安装第三方扩展pip install django-cors-headers配置(settings.py)引用第三方扩展INSTALLED_APPS = [\t'corsheaders',]MIDDLEWARE = [\t'django.contrib.sessions.middleware.SessionMiddleware', 'corsheaders.middleware.CorsMiddleware', // 在两者的中间添加 'django.middleware.common.CommonMiddleware',]CORS跨域配置请求白名单CORS_ORIGIN_WHITELIST = ( 'http://127.0.0.1:8080', 'http://localhost:8080')请求头和cookie# 允许携带哪些请求头CORS_ALLOW_HEADERS = ('source', 'icode')# 允许携带cookieCORS_ALLOW_CREDENTIALS = True" }, { "title": "1.10-创建项目", "url": "/posts/start_project-(copy)/", "categories": "", "tags": "", "date": "2022-08-18 00:00:00 +0000", "snippet": "Vuevue create traveling_vue/src./assets​\t\t./style // 全局样式// App.vue中使用&lt;style lang=\"less\"&gt;// 公共样式@import \"./assets/style/common.less\"; &lt;/style&gt;./components // 组件库​\t\t./common // 可复用的全局...", "content": "Vuevue create traveling_vue/src./assets​\t\t./style // 全局样式// App.vue中使用&lt;style lang=\"less\"&gt;// 公共样式@import \"./assets/style/common.less\"; &lt;/style&gt;./components // 组件库​\t\t./common // 可复用的全局组件​\t\t./… // 其他组件./utils​\t\t./apis.js // 全局接口​\t\t./constans.js // 全局常量​\t\t./filters.js // 全局注册过滤器// main.js中注册import * as filters from './utils/filters'// 注册过滤器Object.keys(filters).forEach(k =&gt; Vue.filter(k, filters[k]))实现全局引用VantUI库main.jsimport * as filters from './utils/filters'// VantUI组件库import Vant from 'vant'import 'vant/lib/index.css'// VantUI组件库Vue.use(Vant)Vue.config.productionTip = false// 注册过滤器Object.keys(filters).forEach(k =&gt; Vue.filter(k, filters[k]))关闭eslint语法对于{ }内空格的限制package.json \"eslintConfig\": { \"rules\": { \"object-curly-spacing\": 0 } },Django设计数据库模型系统模块：轮播图、用户反馈景点模块：景点、景点详情、景点评论用户模块：用户、用户详细信息、登陆历史订单模块：订单、订单明细、支付相关连接数据库（traveling_django/settings.py）DATABASES = { # 'default': { # 'ENGINE': 'django.db.backends.sqlite3', # 'NAME': BASE_DIR / 'db.sqlite3', # } 'default': { 'ENGINE': 'django.db.backends.mysql', 'NAME': 'traveling', 'USER': 'root', 'PASSWORD': 'Paul34252780*', 'HOST': '119.91.211.91', 'PORT': '3306', }}" }, { "title": "web端展示查询的数据（html模板）", "url": "/posts/ECharts/", "categories": "SogouTop50", "tags": "hadoop", "date": "2022-08-01 10:00:00 +0000", "snippet": "导入包1、将js源码文件放入static/js中2、模板中引入&lt;head&gt; &lt;meta charset=\"utf-8\" /&gt; &lt;script src=\"\"&gt;&lt;/script&gt; &lt;script src=\"\"&gt;&lt;/script&gt;&lt;/head&gt;图表&lt;body&gt;定义DOM的宽高&lt;d...", "content": "导入包1、将js源码文件放入static/js中2、模板中引入&lt;head&gt; &lt;meta charset=\"utf-8\" /&gt; &lt;script src=\"\"&gt;&lt;/script&gt; &lt;script src=\"\"&gt;&lt;/script&gt;&lt;/head&gt;图表&lt;body&gt;定义DOM的宽高&lt;div id=\"main\" style=\"width: 1820px;height:980px;\"&gt;&lt;/div&gt; &lt;script type=\"text/javascript\"&gt;异步请求$.ajax({ // 需要包含整个使用数据的过程 url: 'http://127.0.0.1:5000/queryJson', // 一定要写全（包括‘http://’） success: function (data) { data = JSON.parse(data); console.log(data);指定图标的配置项和数据\tvar option = { title: { // 标题 text: 'Sogou_top50' }, tooltip: {}, xAxis: { // x轴 data: data['keyword'] // 由访问返回json的url得到的data字典里的keyword这个key所对应的value }, yAxis: { // 示例名 }, series: [ // y轴 { name: '点击数', type: 'bar', data: data['count'] } ] } // 使用刚指定的配置项和数据显示图表。 myChart.setOption(option); } // 配置项结束 }); // 异步请求的结束\t&lt;/script&gt;&lt;/body&gt;" }, { "title": "web端展示查询的数据（Flask）", "url": "/posts/Flask/", "categories": "SogouTop50", "tags": "hadoop", "date": "2022-07-31 10:00:00 +0000", "snippet": "导入包import pymysqlfrom flask import Flask, url_for, render_template, json获取flask进程app = Flask(__name__)if __name__ == '__main__':\tapp.run()连接数据库获得数据（getData()）连接数据库db = pymysql.connect( user=...", "content": "导入包import pymysqlfrom flask import Flask, url_for, render_template, json获取flask进程app = Flask(__name__)if __name__ == '__main__':\tapp.run()连接数据库获得数据（getData()）连接数据库db = pymysql.connect( user='root', password='root', host='192.168.75.129', database='sogou', charset='utf8', port=3306 )获取cursorcursor = db.cursor()执行查询（需要指定查询哪一张表）cursor.execute('select * from sogou.sogou_top50')从cursor获得数据alldata = cursor.fetchall()打包json数据（top50Json()）分配路由@app.route('/top50Json')执行查询all_data = getData()打包成为json包(数据类型为字典，key为keyword， value为count)t1 = []t2 = []for res in all_data:\tt1.append(res[0])\tt2.append(res[1])\tjson_value = json.dumps({'keyword': t1, 'count': t2})return json_value展示图表分配路由@app.route('/top50')响应模板def show(): return render_template('datashow.html')####" }, { "title": "通过sparkSQL对Mysql执行查询", "url": "/posts/Mysql/", "categories": "SogouTop50", "tags": "hadoop", "date": "2022-07-30 07:00:00 +0000", "snippet": "创建项目Maven ArchetypeArchetype选择maven-archetype-quickstartidea配置File/Project Structure/Modules＋添加scala项目配置porm.xml&lt;dependencies&gt;// 加入以下配置 &lt;dependency&gt; &lt;groupId&gt;org.apache.sp...", "content": "创建项目Maven ArchetypeArchetype选择maven-archetype-quickstartidea配置File/Project Structure/Modules＋添加scala项目配置porm.xml&lt;dependencies&gt;// 加入以下配置 &lt;dependency&gt; &lt;groupId&gt;org.apache.spark&lt;/groupId&gt; &lt;artifactId&gt;spark-core_2.12&lt;/artifactId&gt; &lt;version&gt;2.4.5&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.spark&lt;/groupId&gt; &lt;artifactId&gt;spark-sql_2.12&lt;/artifactId&gt; &lt;version&gt;2.4.5&lt;/version&gt; &lt;/dependency&gt; &lt;!--Java连接MySQL的驱动表--&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;8.0.22&lt;/version&gt; &lt;/dependency&gt;&lt;/dependencies&gt;创建scala class对象package org.exampleclass Sogou(ts:String, uid:String, keyword:String, rank:Int, sorder:Int, url:String)创建package object获得sparkSessionval sparkSession = SparkSession.builder() .appName(\"CaseClassDemo\") .master(\"local[2]\") .getOrCreate();通过sparkSession得到sparkcontextval sc = sparkSession.sparkContext;读取文件val rdd = sc.textFile(\"/data/sogou.500w.utf8\"); # hdfsval data = rdd.map(_.split(\"\\t\"));获得RDDval sogouRDD = data.map(x=&gt;Sogou(x(0).toString,x(1).toString,x(2).toString,x(3).toInt,x(4).toInt,x(5).toString));将RDD转换为DFval sogouDF= sogouRDD.toDF将DF转换成表sogouDF.createOrReplaceTempView(\"t_sogou\");执行查询语句val res = sparkSession.sql(\"select keyword,count(*) query_count from t_sogou group by keyword order by query_count desc limit 50;\");创建数据库val url=\"jdbc:mysql://192.168.75.129:3306/sogou?useUnicode=true&amp;characterEncoding=utf-8&amp;relaxAutoCommit=true&amp;zeroDateTimeBehavior=convertToNull&amp;allowMultiQueries=true\"; # 指定库（需要手动创建） val table =\"sogou_top50\"; # 指定用于保存查询的表的表名（不需要手动创建） val property = new Properties(); property.put(\"user\",\"root\"); property.put(\"password\",\"root\"); property.put(\"driver\",\"com.mysql.cj.jdbc.Driver\")保存结果到数据库res.write.mode(SaveMode.Append).jdbc(url,table,property) sc.stop(); sparkSession.stop();使用maven打包为jar包打开maven界面idea右侧边栏有maven界面，界面内顶栏选择m键Run Anything里写入mvn clean scala:compile compile package在虚拟机中执行jar包将mysql-connector-java-8.0.22.jar放入spark目录下的jars文件夹内使用secureFX将jar包传入虚拟机/data目录使用secureFX进入spark目录cd /home/hd/apps/spark/bin执行代码(指定需要具体执行哪一个class，所使用的jar包，需要执行的jar包的绝对路径)./spark-submit --class org.example.SogouToMySQL --jars /home/hd/apps/spark/jars/mysql-connector-java-8.0.22.jar /home/hd/data/FinalPorject-1.0-SNAPSHOT.jar" }, { "title": "数据操作", "url": "/posts/load-data/", "categories": "SogouTop50", "tags": "hadoop", "date": "2022-07-29 04:00:00 +0000", "snippet": "将原始数据加载到HDFS启动Hadoopstart-all.sh创建存放目录hdfs dfs -mkdir -p /data将数据集传入虚拟机（放入/data目录）使用secureFX传输文件hdfs dfs -put /data/sogou.500w.utf8 /data检查是否成功hdfs dfs -ls /data删除上传文件hdfs dfs -rm -r 路径", "content": "将原始数据加载到HDFS启动Hadoopstart-all.sh创建存放目录hdfs dfs -mkdir -p /data将数据集传入虚拟机（放入/data目录）使用secureFX传输文件hdfs dfs -put /data/sogou.500w.utf8 /data检查是否成功hdfs dfs -ls /data删除上传文件hdfs dfs -rm -r 路径" }, { "title": "环境配置（ECharts）", "url": "/posts/configeration/", "categories": "SogouTop50", "tags": "hadoop", "date": "2022-07-28 04:00:00 +0000", "snippet": "EChartsHandbook - Apache ECharts1、下载https://www.jsdelivr.com/package/npm/echarts选择dist/echarts.js并保存为 echarts.js 文件（保存在项目中当源码使用）2、引入html中&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta ...", "content": "EChartsHandbook - Apache ECharts1、下载https://www.jsdelivr.com/package/npm/echarts选择dist/echarts.js并保存为 echarts.js 文件（保存在项目中当源码使用）2、引入html中&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\" /&gt; &lt;!-- 引入刚刚下载的 ECharts 文件 --&gt; &lt;script src=\"echarts.js\"&gt;&lt;/script&gt; &lt;/head&gt;&lt;/html&gt;" }, { "title": "项目配置", "url": "/posts/python-configuration/", "categories": "线上商城", "tags": "configuration", "date": "2022-06-19 07:00:00 +0000", "snippet": "创建项目：使用后端django框架（virtualenv）创建虚拟环境（进入该目录下）virtualenv -p python3.8 django_py3.8激活虚拟环境django_py3.8/Scripts/activate安装依赖pip install django,mysqlclient,django_redis,Pillow,django-debug-toolbar创建django...", "content": "创建项目：使用后端django框架（virtualenv）创建虚拟环境（进入该目录下）virtualenv -p python3.8 django_py3.8激活虚拟环境django_py3.8/Scripts/activate安装依赖pip install django,mysqlclient,django_redis,Pillow,django-debug-toolbar创建django项目django-admin startproject traveling_django配置django-debug-toolbarsettings.py添加INSTALLED_APP:['debug-toolbar']添加MIDDLEWARE = ['debug_toolbar.middleware.DebugToolbarMiddleware', ]INTERNAL_IPS = ['127.0.0.1', ]urls.pyif settings.DEBUG:\turlpatterns = [path('__debug__/', include(debug_toolbar.urls))] + urlpatterns使用前端vue框架（nodejs）安装vue脚手架npm install -g @vue/cli创建项目vue create traveling_vue进入项目cd traveling_vue安装依赖npm install vue-router -Snpm install vant -Snpm install axios -S安装mysql安装源(yum install)https://dev.mysql.com/downloads/repo/yum/查看可安装的mysql版本yum repolist enabled | grep \"mysql.*-community.*\"解锁mysql安装yum repolist enabled | grep mysql安装mysqlsudo yum install mysql-community-server启动mysqlsystemctl start mysqld获取初始密码sudo grep 'temporary password' /var/log/mysqld.log使用初始密码登录mysql -uroot -p改密码（大小写特殊符号）ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'Paul34252780*';设置允许远程访问update mysql.user set host = '%' where user = 'root';开放3306端口安装gcc编译器yum install gcc gcc-c++安装redis [Download Redis](https://redis.io/download/)（选择5.0版本直接复制下载链接） wget https://download.redis.io/releases/redis-5.0.14.tar.gz解压源码tar -zxvf redis-5.0.14.tar.gz进入源码文件夹cd redis-5.0.14开始编译make运行安装make install修改配置文件使其可以在后台运行vim redis.conf修改为yesdaemonize yes使用配置文件运行redis./src/redis-server redis.conf安装python3.8.10 [Download Python Python.org](https://www.python.org/downloads/)（选择3.8） 下载对应版本wget https://www.python.org/ftp/python/3.8.13/Python-3.8.13.tgz解压tar -zxvf Python-3.8.13.tgz检测能否正常安装(需要gcc编译器支持)sh ./Python-3.8.13/configure安装依赖yum install zlib zlib-devel openssl openssl-develyum install glib2-devel openssl-devel pcre-devel bzip2-devel gzip-develyum install libffi-devel -yyum install zlib zlib-develyum install libjpeg libjpeg-develyum install freetype freetype-devel重新测试(千万不要加–opti什么的参数)./Python-3.8.13/configure编译make看到Python build finished successfully！则表示成功运行安装make install" }, { "title": "linux下安装hadoop并部署全分布", "url": "/posts/hadoop-installation/", "categories": "linux使用", "tags": "configuration", "date": "2022-06-01 08:00:00 +0000", "snippet": "安装单机hadoop创建用户并配置无密码登录创建hadoop用户sudo useradd -m hadoop -s /bin/bash改个密码sudo passwd hadoop赋予管理员权限sudo adduser hadoop sudo尝试使用密码登录localhostssh localhost退出localhostexit配置无密码登录cd ~/.ssh/ssh-keygen -t r...", "content": "安装单机hadoop创建用户并配置无密码登录创建hadoop用户sudo useradd -m hadoop -s /bin/bash改个密码sudo passwd hadoop赋予管理员权限sudo adduser hadoop sudo尝试使用密码登录localhostssh localhost退出localhostexit配置无密码登录cd ~/.ssh/ssh-keygen -t rsacat ./id_rsa.pub &gt;&gt; ./authorized_keys再次尝试进入localhost，不需要输入密码则成功ssh localhost安装java环境创建文件夹cd /usr/libsudo mkdir jvmcd ~sudo mkdir Donwloads # 如果没有的话（gnomo桌面版有自带）cd Downloads传入jdk安装包sudo rz -esudo sz dk-8u162-linux-x64.tar.gz解压jdksudo tar -zxvf ./jdk-8u162-linux-x64.tar.gz -C /usr/lib/jvm设置环境变量cd ~vim ~/.bashrc# 开头加入export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_162export JRE_HOME=${JAVA_HOME}/jreexport CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/libexport PATH=${JAVA_HOME}/bin:$PATHsource ~/.bashrc查看是否安装成功java -version安装Hadoop传文件cd Downloadssudo rz -esudo sz hadoop-3.1.3.tar.gz解压安装包sudo tar -zxf ~/Downloads/hadoop-3.1.3.tar.gz -C /usr/local 改名cd /usr/local/sudo mv ./hadoop-3.1.3/ ./hadoop 修改文件权限sudo chown -R hadoop ./hadoop检查是否安装成功cd /usr/local/hadoop./bin/hadoop version打包容器查看容器iddocker ps生成镜像docker commit (container id) (image's name)Hadoop 伪分布式修改配置vim ./etc/hadoop/core-site.xml&lt;configuration&gt; &lt;property&gt; &lt;name&gt;hadoop.tmp.dir&lt;/name&gt; &lt;value&gt;file:/usr/local/hadoop/tmp&lt;/value&gt; &lt;description&gt;Abase for other temporary directories.&lt;/description&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;fs.defaultFS&lt;/name&gt; &lt;value&gt;hdfs://localhost:9000&lt;/value&gt; &lt;/property&gt;&lt;/configuration&gt;vim ./etc/hadoop/hdfs-site.xml&lt;configuration&gt; &lt;property&gt; &lt;name&gt;dfs.replication&lt;/name&gt; &lt;value&gt;1&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt; &lt;value&gt;file:/usr/local/hadoop/tmp/dfs/name&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt; &lt;value&gt;file:/usr/local/hadoop/tmp/dfs/data&lt;/value&gt; &lt;/property&gt;&lt;/configuration&gt;NameNode格式化cd /usr/local/hadoop./bin/hdfs namenode -format启动hadoop服务cd /usr/local/hadoop./sbin/start-dfs.sh关闭hadoop服务cd /usr/local/hadoop./sbin/stop-dfs.shHadoop 分布式master创建新容器（master / slave）docker run -p (port:port) --privileged -ti --net staticnet --ip (static ip address) --name=(container name) (image's name) /bin/bash开启ssh服务service ssh restart修改workers文件cd /usr/local/hadoop/etc/hadoopvim workers删去localhost加入Slave1修改core-site.xmlvim core-site.xml&lt;configuration&gt; &lt;property&gt; &lt;name&gt;fs.defaultFS&lt;/name&gt; &lt;value&gt;hdfs://Master:9000&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;hadoop.tmp.dir&lt;/name&gt; &lt;value&gt;file:/usr/local/hadoop/tmp&lt;/value&gt; &lt;description&gt;Abase for other temporary directories.&lt;/description&gt; &lt;/property&gt;&lt;/configuration&gt;xxxxxxxxxx sudo apt install docker-ce docker-ce-cli containerd.iotextvim hdfs-site.xml&lt;configuration&gt; &lt;property&gt; &lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt; &lt;value&gt;Master:50090&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;dfs.replication&lt;/name&gt; &lt;value&gt;1&lt;/value&gt; # 集群中的数据节点数量 &lt;/property&gt; &lt;property&gt; &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt; &lt;value&gt;file:/usr/local/hadoop/tmp/dfs/name&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt; &lt;value&gt;file:/usr/local/hadoop/tmp/dfs/data&lt;/value&gt; &lt;/property&gt;&lt;/configuration&gt;修改文件mapred-site.xml文件名sudo mv ./mapred-site.xml.template ./mapred-site.xml修改mapred-site.xml文件配置vim mapred-site.xml&lt;configuration&gt; &lt;property&gt; &lt;name&gt;mapreduce.framework.name&lt;/name&gt; &lt;value&gt;yarn&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;mapreduce.jobhistory.address&lt;/name&gt; &lt;value&gt;Master:10020&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;mapreduce.jobhistory.webapp.address&lt;/name&gt; &lt;value&gt;Master:19888&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.app.mapreduce.am.env&lt;/name&gt; &lt;value&gt;HADOOP_MAPRED_HOME=/usr/local/hadoop&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;mapreduce.map.env&lt;/name&gt; &lt;value&gt;HADOOP_MAPRED_HOME=/usr/local/hadoop&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;mapreduce.reduce.env&lt;/name&gt; &lt;value&gt;HADOOP_MAPRED_HOME=/usr/local/hadoop&lt;/value&gt; &lt;/property&gt; &lt;/configuration&gt;修改yarn-site.xmlvim yarn-site.xml&lt;configuration&gt; &lt;property&gt; &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt; &lt;value&gt;Master&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt; &lt;value&gt;mapreduce_shuffle&lt;/value&gt; &lt;/property&gt;&lt;/configuration&gt;清除伪分布下生成的临时文件cd /usr/localsudo rm -r ./hadoop/tmpsudo rm -r ./hadoop/logs/*tar -zcf ~/hadoop.master.tar.gz ./hadoopcd ~scp ./hadoop.master.tar.gz Slave1:/home/hadoop" }, { "title": "linux基础配置", "url": "/posts/Linux-configuration/", "categories": "linux使用", "tags": "configuration", "date": "2022-06-01 07:00:00 +0000", "snippet": "拉取容器docker run -p (port:port) --privileged -ti --name=(container name) ubuntu:(ubuntu version) /bin/bash给root改密码passwd root更新下下载器apt-get update下载文件修改器apt-get install vim换源复制一份备份sudo cp /etc/apt/sou...", "content": "拉取容器docker run -p (port:port) --privileged -ti --name=(container name) ubuntu:(ubuntu version) /bin/bash给root改密码passwd root更新下下载器apt-get update下载文件修改器apt-get install vim换源复制一份备份sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak打开/etc/apt/sources.list文件，在前面添加如下条目，并保存。sudo vim /etc/apt/sources.listubuntu镜像-ubuntu下载地址-ubuntu安装教程-阿里巴巴开源镜像站 (aliyun.com) [ubuntu 镜像站使用帮助 清华大学开源软件镜像站 Tsinghua Open Source Mirror](https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/) 更新源sudo apt-get update更新软件：sudo apt-get upgrade基础环境的配置：下个安全证书sudo apt-get install --reinstall ca-certificatessshapt-get install ssh开启ssh服务sudo /etc/init.d/ssh startservice ssh start/stop/restart查看下ssh运行的状态ps -e|grep sshservice ssh status赋予ssh服务全部权限chmod 777 /etc/ssh/ssh_config修改下ssh配置文件vim /etc/ssh/ssh_config最后两行加入：# StrictHostKeyChecking no# UserKnownHostsFile /dev/nullvim /etc/ssh/sshd_config把注释去掉：PubkeyAuthentication yesAuthorizedKeysFile .ssh/authorized_keysPermitRootLogin yesPort 22ListenAddress 0.0.0.0ListenAddress ::将用户列表加入已知用户vim ~/.ssh/config写入：UserKnownHostsFile ~/.ssh/known_hosts尝试localhostssh localhost添加net-tools工具包apt-get install net-tools查看容器ipifconfig配置ssh连接右键虚拟网卡vEthernet(WSL)，找到Internet(TCP/IPv4)——属性将ip地址改至与虚拟机同一网段下，子网掩码相同打开SecureCRT，快速连接Hostname:(虚拟网卡ip)Port:22(或者是创建容器时22端口映射的端口：60001:22则写60001)下载传输文件功能sudo apt-get install lrzsz传文件cd (文件放入的目录)sudo rz -e接收文件sudo sz (文件名)" }, { "title": "安装hadoop", "url": "/posts/hadoop/", "categories": "随笔", "tags": "hadoop", "date": "2022-05-01 07:00:00 +0000", "snippet": "拉取容器docker run -p 60001:22 -p 5901:5901 --privileged -ti --name=hadoop ubuntu:16.04 /bin/bash给root改密码passwd root更新下下载器apt-get update下载文件修改器apt-get install vim换源复制一份备份sudo cp /etc/apt/sources.list /...", "content": "拉取容器docker run -p 60001:22 -p 5901:5901 --privileged -ti --name=hadoop ubuntu:16.04 /bin/bash给root改密码passwd root更新下下载器apt-get update下载文件修改器apt-get install vim换源复制一份备份sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak打开/etc/apt/sources.list文件，在前面添加如下条目，并保存。sudo vim /etc/apt/sources.listubuntu镜像-ubuntu下载地址-ubuntu安装教程-阿里巴巴开源镜像站 (aliyun.com) [ubuntu 镜像站使用帮助 清华大学开源软件镜像站 Tsinghua Open Source Mirror](https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/) 更新源sudo apt-get update如出现依赖问题，解决方式如下：sudo apt-get -f install更新软件：sudo apt-get upgrade基础环境的配置：下个安全证书sudo apt-get install --reinstall ca-certificatessshapt-get install ssh加入hadoop用户sudo useradd -m hadoop -s /bin/bash给它改个密码sudo passwd hadoop赋予管理员权限sudo adduser hadoop sudo开启ssh服务sudo /etc/init.d/ssh start查看下ssh运行的状态ps -e|grep ssh赋予ssh服务全部权限chmod 777 /etc/ssh/ssh_config修改下ssh配置文件vim /etc/ssh/ssh_config最后两行加入：# StrictHostKeyChecking no# UserKnownHostsFile /dev/nullvim /etc/ssh/sshd_config把注释去掉：PubkeyAuthentication yesAuthorizedKeysFile .ssh/authorized_keysPermitRootLogin yesPort 22ListenAddress 0.0.0.0ListenAddress ::尝试localhost（遇到了报错）ssh localhost解决warningvim ~/.ssh/config写入：UserKnownHostsFile ~/.ssh/known_hosts配置无密码登录进入hadoop用户su hadoop创建.ssh文件夹ssh localhost进入ssh目录cd ~/.ssh/创建密码验证（一直按回车）ssh-keygen -t rsa授予权限cat ./id_rsa.pub &gt;&gt; ./authorized_keys再次重启ssh服务sudo /etc/init.d/ssh restart查看ssh运行状态service ssh status设置ssh开机启动 sudo service ssh enable此时再用 ssh localhost 命令，无需输入密码就可以直接登陆了没有netstat命令。需要手工添加net-tools工具包。输入命令：apt-get install net-tools安装桌面 apt-get install apt-transport-httpsapt-get install ubuntu-desktop gnome-panel gnome-settings-daemon metacity nautilus gnome-terminal -yapt-get install vnc4server -yapt-get install gnome初始化vnc服务(设置八位密码)vncserver配置VNC，关联gnome桌面vim ~/.vnc/xstartup修改配置文件：vim ~/.vnc/xstartup在最上面添加如下内容：export XKL_XMODMAP_DISABLE=1unset SESSION_MANAGERunset DBUS_SESSION_BUS_ADDRESS在最下面添加如下内容：gnome-panel &amp;gnmoe-settings-daemon &amp;metacity &amp;nautilus &amp;gnome-terminal &amp;使用vncviewer连接localhost:5901换肤安装zshsudo apt-get install zsh将 zsh 设置为默认 shellchsh -s /bin/zsh检查是否成功echo $SHELL# 返回 /usr/bin/zsh 即表示成功；若没成功，重启试试看获取 ip：使用网址：https://www.ipaddress.com/ 获得raw.githubusercontent.com网站的ip地址：185.199.108.133。修改 hosts 文件sudo gedit /etc/hosts在最后一行添加：185.199.108.133 raw.githubusercontent.com安装gitsudo apt-get install git安装oh my Zshsh -c \"$(wget ://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)\"打开配置文件调整主题vim ~/.zshrcZSH_THEME=\"ys\"应用配置source ~/.zshrc配置插件自动补全 zsh-autosuggestionsgit clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions 代码高亮 zsh-syntax-highlightinggit clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting快速打开 GitHub 仓库 git-opengit clone https://github.com/paulirish/git-open.git $ZSH_CUSTOM/plugins/git-open最后需要配置 pluginsplugins=( git zsh-autosuggestions zsh-syntax-highlighting git-open )应用配置source ~/.zshrc###" }, { "title": "换个shell皮肤", "url": "/posts/ubuntu/", "categories": "随笔", "tags": "ubuntu", "date": "2022-04-29 12:15:00 +0000", "snippet": "今日任务： 创建ubuntu20.04.04 换源 换肤 安装docker 创建ubuntu20.0.4微软商店下载换源复制一份备份sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak打开/etc/apt/sources.list文件，在前面添加如下条目，并保存。sudo vim ...", "content": "今日任务： 创建ubuntu20.04.04 换源 换肤 安装docker 创建ubuntu20.0.4微软商店下载换源复制一份备份sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak打开/etc/apt/sources.list文件，在前面添加如下条目，并保存。sudo vim /etc/apt/sources.listubuntu镜像-ubuntu下载地址-ubuntu安装教程-阿里巴巴开源镜像站 (aliyun.com) [ubuntu 镜像站使用帮助 清华大学开源软件镜像站 Tsinghua Open Source Mirror](https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/) 更新源sudo apt-get update如出现依赖问题，解决方式如下：sudo apt-get -f install更新软件：sudo apt-get upgrade换肤安装zshsudo apt-get install zsh将 zsh 设置为默认 shellchsh -s /bin/zsh检查是否成功echo $SHELL# 返回 /usr/bin/zsh 即表示成功；若没成功，重启试试看安装oh my Zshsh -c \"$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)\"! 报错：Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|::|:443... failed: Connection refused.获取 ip：使用网址：https://www.ipaddress.com/ 获得raw.githubusercontent.com网站的ip地址：185.199.108.133。修改 hosts 文件sudo gedit /etc/hosts在最后一行添加：185.199.108.133 raw.githubusercontent.com打开配置文件调整主题vim ~/.zshrcZSH_THEME=\"ys\"应用配置source ~/.zshrc配置插件自动补全 zsh-autosuggestionsgit clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions 代码高亮 zsh-syntax-highlightinggit clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting快速打开 GitHub 仓库 git-opengit clone https://github.com/paulirish/git-open.git $ZSH_CUSTOM/plugins/git-open最后需要配置 pluginsplugins=( git zsh-autosuggestions zsh-syntax-highlighting git-open )应用配置source ~/.zshrc安装docker更新软件包索引，并且安装必要的依赖软件，来添加一个新的 HTTPS 软件源：sudo apt install apt-transport-https ca-certificates curl gnupg-agent software-properties-common使用下面的 curl 导入源仓库的 GPG key：curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -将 Docker APT 软件源添加到你的系统：sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"安装dockersudo apt install docker-ce docker-ce-cli containerd.io" }, { "title": "我的第一篇博文", "url": "/posts/first-post/", "categories": "随笔", "tags": "生活", "date": "2022-04-21 12:15:00 +0000", "snippet": "以后就要在这里记录我的敲代码日记啦！Sebs要努力！//代码片段int main(){ hello world;}", "content": "以后就要在这里记录我的敲代码日记啦！Sebs要努力！//代码片段int main(){ hello world;}" } ]
